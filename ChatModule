local chatmodule = {}
local resourcedirectory=game.ReplicatedStorage.GlobalSpells
local interchangephrases
local context=0
local checkcontext=false
local globalrng=Random.new()
badwords={"album","nazi","nazism","racism","theft","sexual","criminal","crime","felony","misdemeneor",
	"arson","bombing","terrorism","racist","copyright","infringement","my little pony","holocaust","genocide","hatred","offender","state-law","state law","city code","programming","hey","hi","hello","you","me","greetings"}
local blacklist={"none"}--Adds previous response to blacklist for chatmodule.SearchQuery
local interchangephrases={
	-- Introductory
	{"Hello","Hi","Hey","Greetings"},
{"I am feeling great! How are you feeling?", 
	"I'm doing fine thanks, how are you?"},{ "knowledgeable ", 	"informed", "studied", "well-versed", "practiced", "aware "},{ "smoothly ", "without trial ", "easy ", "relaxing ", "enjoyable "},{ "faring", "riding", "sailing"},{ "ditches ", "pits "},{ "careful ", "insightful ", "cautious ", "steady "}
,{ "events ", "things ", "occurences ", "situations "},{ "Did you know ", "Were you aware ", "Have you heard "},{ "trapped", "stuck ", "immobile "},{ "happening", "occuring", "going on", "preceding"},{ "need", "require ", "desire "},{ "sparkle in your eye! ", "keen eye for adventure! ", "heart of a warrior! ", "unyielding spirit of a legendary warrior! "},{ "legendary ", "mythical ", "fabled", "powerful ", "renowned", "valiant ", "glorious "},{ "unyielding", "determined", "hardened", "battle-ready", "stubborn tenacity"},{ " assistance ", " help "},{ " comment ", " state ", " share ", " tell "},{ "Howerever, ", "Moreover, ", "In addition, ", "Furthermore, "},{ "nothing", "not a single thing"},{ "share ", "spread ", "part "},{ "escape ", "get away "},{ " best ", " greatest "},{ " special ", " unique ", " one of a kind ", " one in a billion "},{ "offering", "bartering", "trading"},{ "giving", "offering"},{ "soul ", "essence ", "mana ", "immortal-soul "},{ " said, "},{ "stocked", "available "},{ "sells ", "barters ", "trades in ", "has available "},{ "find ", "discover ", "uncover "},{ "looking", "searching"},{ "liking ", "enjoyment ", "privy ", "tastes ", "sensitivities "},{ "value ", "worth ",},{ "given ", "bestowed", "relinquished"},{ "quantity ", "amount "},{ "quantities ", "amounts "},{ " devour ", " consume ", " feed-on ", " eat "},{ "warp ", "distort "},{ "strong ", "incredible ", "powerful "},{ "facts ", "knowledge ", "matters "},{ "infinite ", "unlimited"},{ "conjunction ", "along with "},{ " dimension ", " place ", " material plane "},{ "regenerate ", "recouperate ", "restore "},{ "topic ", "subject "},{ "entities ", "monsters "},{ "destructive ", "chaotic "},{ "absorb ", "assimilate ", "sap energy from "},{ "However, ", "Morever, ", "In addition, ", "Also, ", "Not to mention, ", "This includes, "},{ " encounter ", " see "},{ "trap ", "diversion ", "obstacle "},{ "minion ", "disciple "},{ "mindless ", "thoughtless ", "brainless ", "will-less "},{ "used", "harnessed", "portrayed", "pictured"},{ "touches ", "makes with contact with ", "contacts "},{ "feeling", "doing"},{ "infinite", "never-ending", "limitless"},{ "treasures ", "trinkets ", "artifacts ", "loot ", "spoils "},{ "untold ", "unforeseen ", "unspoken ", "unknown "},{ "decieve ", "fool ", "mislead ", "misguide "},{ "underground ", "subterranean "},{ "unsuspecting ", "innocent ", "credulous ", "easy ", "simple ", "unsuspicious "},{ "hungry ", "starving ", "famished"},{ "creature ", "monster ", "entity "},{ "anything", "everything"},{ "shape ", "form ", "structure "},{ "size ", "volume ", "area "},
{ "happy ", "joyful ", "cheerful ", "glad ", "delighted"}, { "sad ", "unhappy ", "miserable ", "depressed", "sorrowful "}, { " big ", " large ", " huge ", " giant ", " enormous "}, { " small ", " tiny ", " little ", " miniature ", " petite "}, { " fast ", "quick ", " speedy ", " swift ", " rapid "}, { "slow ", "sluggish ", "lethargic ", "lazy ", "tardy "}, { "smart ", "intelligent ", "clever ", "bright ", "brilliant "}, { "stupid ", "dumb ", "foolish ", "ignorant ", "senseless "}, { "funny ", "humorous ", "amusing", "hilarious ", "comical "}, { "boring", "dull ", "tedious ", "uninteresting ", "monotonous "}, { "angry ", "mad ", "furious ", "irate ", "livid "}, { "calm ", "peaceful ", "serene ", "tranquil ", "relaxed"},
{ "beautiful ", "pretty ", "lovely ", "gorgeous ", "stunning "}, { "ugly ", "hideous ", "unattractive ", "repulsive ", "horrible "}, { "good ", "great ", "excellent ", "wonderful ", "superb "}, { "bad ", "terrible ", "awful ", "horrible ", "poor "}, { "easy ", "simple ", "effortless ", "straightforward ", "smooth "}, { "hard ", "difficult ", "challenging ", "tough ", "demanding "}, { " hot ", " warm ", " heated", " boiling", " scorching"}, { "cold ", "cool ", "chilly ", "freezing ", "frosty "}, { "new ", "fresh ", "recent ", "modern ", "novel "}, { " old ", " ancient ", " antique "}, { "rich ", "wealthy ", "affluent ", "prosperous ", "well-off "},
{ "poor ", "impoverished", "destitute ", "broke "}, { "friendly ", "pleasant ", "polite "}, { "mean ", "rude ", "nasty ", "unfriendly ", "cruel "}, { " quiet ", " silent ", " hushed ", "muted", "soft "}, { "dim ", "gloomy ", "shadowy ", "murky "}, { "light ", "bright ", "luminous ", "shiny ", "radiant "}, { "high ", "tall ", "lofty ", "elevated"},
{" clean "," tidy "," neat "," spotless "," immaculate "}, {" dirty"," messy"," filthy"," grimy"," sloppy"}, {" strong "," powerful "," mighty "," forceful "," sturdy "}, {" weak "," feeble "," frail "," faint "," flimsy "}, {" happy "," joyful "," cheerful "," glad "," delighted"},{" work "," job "," function "},
{ " accede " ,  " agree " ,  " consent " ,  " comply " ,  " yield " },
{ " adhere " ,  " cling "  ,  " stick " },
{ " adjacent " ,  " adjoining " ,  " neighboring "} ,{  " near " ,  " close " },
{ " admire " ,  " appreciate "} ,  {" esteem " ,  " respect " ,  " honor " },
{ " admonish " ,  " caution " },  {" criticize " ,  " disapprove " ,  " rebuke " },
{ " adulterate " ,  " corrupt " ,  " debase " ,  " falsify " ,  " pollute " },
{ " adventurous " ,  " bold " ,  " daring " ,  " fearless " ,  " intrepid " },
{ " affable " ,  " approachable "} ,  {" courteous " ,  " friendly " ,  " likable " },
{ " affluent " ,  " wealthy " ,  " well-to-do " ,  " well-off " ,  " prosperous " },
{ " aghast " ,  " appalled " ,  " horrified " ,  " shocked " ,  " stunned " },
{ " agitate " ,  " disturb "} , {" flurry " ,  " perturb " },
{ " ail " ,  " afflict " }, { " bother " ,  " distress " ,  " trouble " },
{  " frighten " ,  " scare " ,  " startle " ,  " terrify " },
{ " descend "  ,  " settle " ,  " touch down " },
{ " alleviate " , " mitigate " ,  " relieve " },
{ " indifferent " ,  " reserved" ,  " standoffish " },
{ " alter " ,  " change " ,  " modify " ,  " transform " },
{ " ambiguous " ,  " unclear " ,  " vague " ,  " uncertain " },
{ " ambitious" ,  " aspiring" ,  " enterprising" ,  " go-getting" ,  " striving" },
{  " better " ,  " improve " ,  " rectify " ,  " reform " },
{ " amiable " ,  " agreeable " ,  " congenial " ,  " good-natured" ,  " pleasant " },
{ " ample " ,  " abundant " ,  " enough "  ,  " plentiful " },
{ " amused" ,  " entertained" , " humored" ,  " tickled" },
{ " anarchy " ,  " chaos " ,  " disorder " ,  " turmoil " },
{ " ancestral " ,  " inherited"  ,  " traditional "  },
{ " ancient " ,  " antique " ,  " archaic " ,  " old " ,  " olden " },
{ " angelic " ,  " blessed" ,  " divine " ,  " holy " ,  " saintly " },
{ " annoy " ,  " bother " ,  " irk " ,  " irritate " ,  " vex " },
{ " antagonize " ,  " annoy " ,  " exasperate " ,  " frustrate " ,  " irritate " },
{ " anticipate " ,  " expect " ,  " forecast " ,  " predict " ,  " look forward to " },
{ " anxious " ,  " apprehensive " ,  " concerned"  ,  " worried" },
{ " apathetic " ,  " indifferent " ,  " unconcerned" ,  " uninterested" ,  " unmoved" },
{ " appreciate " ,  " admire " ,  " cherish "}, { " esteem " ,  " value " },
{ " applaud " ,  " approve " ,  " commend "},
{ " arrogant " ,  " conceited" ,  " haughty " ,  " proud " ,  " vain " },
{ " artificial " ,  " fake " ,  " false " ,  " imitation " ,  " synthetic " },
{ " ascend " ,  " climb " ,  " mount " ,  " rise " ,  " soar " },
{ " ashamed" ,  " embarrassed" ,  " humiliated" ,  " mortified" ,  " sheepish " },
{ " assiduous " ,  " diligent " ,  " industrious " ,  " painstaking " ,  " sedulous " },
{ " assuage " ,  " alleviate " ,  " ease " ,  " mitigate " ,  " relieve " },
{ " astonish " ,  " amaze " ,  " astound " ,  " surprise " ,  " dumbfound " },
{ " auspicious " ,  " favorable " ,  " fortunate " ,  " propitious " ,  " promising " },
{ " authentic " ,  " genuine " ,  " real " ,  " true " ,  " unadulterated" },
{ " authoritative " ,  " dominant " ,  " forceful " ,  " powerful " ,  " influential " },
{ " autonomous " ,  " independent " ,  " self-governing " ,  " self-ruling " ,  " sovereign " },
{ " avert " ,  " avoid " ,  " deflect " ,  " dodge " ,  " ward off " },
{ " avid " ,  " eager " ,  " enthusiastic " ,  " keen " },
{ " happy " ,  " joyful " ,  " cheerful " ,  " glad " ,  " delighted" },
{ " sad " ,  " unhappy " ,  " miserable " ,  " depressed" ,  " sorrowful " },
{ " big " ,  " large " ,  " huge " ,  " giant " ,  " enormous " },
{ " small " ,  " tiny " ,  " little " ,  " miniature " ,  " petite " },
{ " fast " ,  " quick " ,  " speedy " ,  " swift " ,  " rapid " },
{ " slow " ,  " sluggish " ,  " lethargic " ,  " lazy " ,  " tardy " },
{ " smart " ,  " intelligent " ,  " clever " ,  " bright " ,  " brilliant " },
{ " stupid " ,  " dumb " ,  " foolish " ,  " ignorant " ,  " senseless " },
{ " funny " ,  " humorous " ,  " amusing " ,  " hilarious " ,  " comical " },
{ " boring " ,  " dull " ,  " tedious " ,  " uninteresting " ,  " monotonous " },
{ " angry " ,  " mad " ,  " furious " ,  " irate " ,  " livid " },
{ " calm " ,  " peaceful " ,  " serene " ,  " tranquil " ,  " relaxed" },
{ " beautiful " ,  " pretty " ,  " lovely " ,  " gorgeous " ,  " stunning " },
{ " ugly " ,  " hideous " ,  " unattractive " ,  " repulsive " ,  " horrible " },
{ " good " ,  " great " ,  " excellent " ,  " wonderful " ,  " superb " },
{ " bad " ,  " terrible " ,  " awful " ,  " horrible " ,  " poor " },
{ " easy " ,  " simple " ,  " effortless " ,  " straightforward " ,  " smooth " },
{ " hard " ,  " difficult " ,  " challenging " ,  " tough " ,  " demanding " },
{ " hot " ,  " warm " ,  " heated" ,  " boiling " ,  " scorching " },
{ " cold " ,  " cool " ,  " chilly " ,  " freezing " ,  " frosty " },
{ " new " ,  " fresh " ,  " recent " ,  " modern " ,  " novel " },
{ " old " ,  " ancient " ,  " antique " },
{ " rich " ,  " wealthy " ,  " affluent " ,  " prosperous " ,  " well-off " },
{ " poor " ,  " impoverished" ,  " destitute " ,  " broke " },
{ " friendly " ,  " pleasant " ,  " polite " },
{ " mean " ,  " rude " ,  " nasty " ,  " unfriendly " ,  " cruel " },
{ " quiet " ,  " silent " ,  " hushed " ,  " muted " ,  " soft " },
{ " dim " ,  " gloomy " ,  " shadowy " ,  " murky " },
{  " bright " ,  " luminous " ,  " shiny " ,  " radiant " },
{ " lofty " ,  " elevated" },
{ " clean " ,  " tidy " ,  " neat " ,  " spotless " ,  " immaculate " },
{ " abandon " ,  " desert " ,  " forsake " ,  " leave " ,  " neglect " },
{ " abuse " ,  " mistreat " ,  " maltreat " ,  " ill-treat " ,  " exploit " },
{ " accept " ,  " receive " ,  " welcome " ,  " greet " ,  " take " },
{ " accurate " ,  " correct " ,  " precise " ,  " exact " ,  " factual " },
{ " achieve " ,  " accomplish " ,  " complete " ,  " fulfill " ,  " attain " },
{ " acknowledge " ,  " admit " ,  " confess " ,  " grant " ,  " recognize " },
{ " acquaintance " ,  " friend " ,  " associate " ,  " contact " ,  " relation " },
{ " solve " ,  " perform " ,  " practice " },
{ " add " ,  " increase " }, { " supplement " ,  " augment " },
{ " admire " ,  " respect "} , {" esteem " ,  " honor " ,  " venerate " },
{ " adult " ,  " grown-up " ,  " mature " ,  " full-grown " ,  " grown " },
{ " afraid " ,  " scared" ,  " frightened" ,  " terrified" ,  " apprehensive " },
{ " agree " ,  " consent "  ,  " comply " }, { " accede ",  " assent " },
{ " aim " ,  " goal " ,  " objective " ,  " target " ,  " purpose " },
{ " alive " ,  " living " ,  " animate " ,  " existent " ,  " subsisting " },
{ " all " ,  " whole " ,  " entire " ,  " complete " ,  " total " },
{ " allow " ,  " permit " ,  " let " ,  " authorize " ,  " consent " },
{ " alone " ,  " single " ,  " un accompanied" ,  " unison " ,  " unshared" },
{ " alternate " ,  " change " ,  " vary " ,  " alternate " ,  " substitute " },
{ " always " ,  " constantly " ,  " forever " ,  " eternally " ,  " perpetually " },
{ " amaze " ,  " astonish " ,  " as tound " ,  " surprise " ,  " dumbfound " },
{ " ancestor " ,  " forefather " ,  " progenitor " ,  " forebear " ,  " parent " },
{ " anger " ,  " rage " ,  " fury " ,  " ire " ,  " wrath " },
{ " angry " ,  " enraged" ,  " furious " ,  " irate " ,  " mad " },
{ " answer " ,  " reply " ,  " respond " ,  " correspond " ,  " rejoin " },
{ " apology " ,  " regret " ,  " excuse " ,  " mea culpa " ,  " remorse " },
{ " appear " ,  " seem " ,  " look " ,  " emerge " ,  " materialize " },
{ " appreciate " ,  " value " ,  " esteem " ,  " cherish " ,  " prize " },
{ " approve " ,  " endorse " ,  " sanction " ,  " support " ,  " commend " },
{ " argue " ,  " debate " ,  " dispute " ,  " controvert " ,  " wrangle " },
{ " arm " ,  " weapon " ,  " armament " ,  " munition " ,  " ordnance " },
{ " arrive " ,  " come " ,  " reach " ,  " attain " ,  " get " },
{ " ask " ,  " request " ,  " demand " ,  " entreat " ,  " implore " },
{ " assemble " ,  " gather " ,  " collect " ,  " convene " ,  " muster " },
{ " assist " ,  " help " ,  " aid " ,  " support " ,  " succor " },
{ " assure " ,  " ensure " ,  " insure " ,  " guarantee " ,  " vouch for " },
{ " attack " ,  " assault " ,  " invade " ,  " raid " ,  " strike " },
{ " attend " ,  " be present " ,  " go to " ,  " watch " ,  " observe " },
{ " authority " ,  " power " ,  " control " ,  " command " ,  " jurisdiction " },
{ " avoid " ,  " evade " ,  " shun " ,  " keep away from " ,  " forgo " },
{ " back " ,  " support " ,  " endorse " ,  " champion " ,  " vindicate " },
{ " bad " ,  " evil " ,  " wicked" ,  " vicious " ,  " malevolent " },
{ " balance " ,  " equilibrium " ,  " poise " ,  " steadiness " ,  " stability " },
{ " beautiful " ,  " pretty " ,  " lovely " ,  " gorgeous " ,  " stunning " },
{ " beg " ,  " plead " ,  " implore " ,  " supplicate " ,  " beseech " },
{ " belief " ,  " faith " ,  " trust " ,  " conviction " ,  " credence " },
{ " bend " ,  " curve " ,  " lean " ,  " incline " ,  " bow " },
{ " benefit " ,  " advantage " ,  " profit " ,  " good " ,  " boon " },
{ " best " ,  " excellent " ,  " superb " ,  " first-rate " ,  " top-notch " },
{ " betray " ,  " desert " ,  " forsake " ,  " treacherous " ,  " unfaithful " },
{ " big " ,  " large " ,  " huge " ,  " gigantic " ,  " enormous " },
{ " bind " ,  " tie " ,  " fasten " ,  " secure " ,  " immobilize " },
{ " bless " ,  " favor " ,  " glorify " ,  " sanctify " ,  " hallow " },
{ " blind " ,  " sightless " ,  " unseeing " ,  " unsighted" ,  " invisible " },
{ " blood " ,  " gore " ,  " haemorrhage " ,  " sanguine " ,  " crimson " },
{ " body " ,  " physique " ,  " frame " ,  " corpus " ,  " corpuscle " },
{ " bold " ,  " brave " ,  " courageous " ,  " daring " ,  " intrepid " },
{ " born " ,  " born " ,  " begotten " ,  " derived" ,  " sprouted" },
{ " borrow " ,  " lend " ,  " use " ,  " take " ,  " appropriate " },
{ " break " ,  " smash " ,  " shattered" ,  " splinter " ,  " shatter " },
{ " brief " ,  " short " ,  " concise " ,  " terse " ,  " succinct " },
{ " bright " ,  " brilliant " ,  " luminous " ,  " radiant " ,  " glowing " },
{ " broken " ,  " damaged" ,  " fractured" ,  " shattered" ,  " impaired" },
{ " build " ,  " construct " ,  " erect " ,  " fabricate " ,  " create " },
{ " burden " ,  " load " ,  " encumber " ,  " weigh down " ,  " oppress " },
{ " busy " ,  " occupied" ,  " engaged" ,  " occupied" ,  " tied up " },
{ " buy " ,  " purchase " ,  " acquire " ,  " procure " ,  " obtain " },
{ " buy " ,  " purchase " ,  " acquire " ,  " procure " ,  " obtain " },
{ " calm " ,  " tranquil " ,  " serene " ,  " placid " ,  " unruffled" },
{ " careful " ,  " cautious " ,  " circumspect " ,  " wary " ,  " vigilant " },
{ " cause " ,  " create " ,  " generate " ,  " produce " ,  " effect " },
{ " certain " ,  " sure " ,  " positive " ,  " confident " ,  " convinced" },
{ " change " ,  " alter " ,  " modify " ,  " transform " ,  " convert " },
{ " character " ,  " personality " ,  " nature " ,  " disposition " ,  " temperament " },
{ " child " ,  " kid " ,  " infant " ,  " toddler " ,  " youngster " },
{ " choose " ,  " select " ,  " pick " ,  " decide " ,  " elect " },
{ " circle " ,  " ring " ,  " orb " ,  " disc " ,  " halo " },
{ " class " ,  " category " ,  " group " ,  " division " ,  " sort " },
{ " clean " ,  " spotless " ,  " immaculate " ,  " neat " ,  " tidy " },
{ " clear " ,  " transparent " ,  " lucid " ,  " unclouded" ,  " unobstructed" },
{ " clever " ,  " bright " ,  " intelligent " ,  " sharp " ,  " shrewd " },
{ " close " ,  " near " ,  " adjacent " ,  " contiguous " ,  " in close proximity " },
{ " clothe " ,  " dress " ,  " attire " ,  " garb " ,  " outfit " },
{ " cold " ,  " chilly " ,  " cool " ,  " freezing " ,  " icy " },
{ " collect " ,  " gather " ,  " assemble " ,  " muster " ,  " round up " },
{ " combine " ,  " unite " ,  " join " ,  " merge " ,  " fuse " },
{ " comfort " ,  " console " ,  " soothe " ,  " reassure " ,  " placate " },
{ " common " ,  " ordinary " ,  " unexceptional " ,  " unremarkable " ,  " usual " },
{ " compare " ,  " contrast " ,  " equate " ,  " match " ,  " relate " },
{ " complete " ,  " finish " ,  " end " ,  " finalize " ,  " consummate " },
{ " compose " ,  " write " ,  " create " ,  " form " ,  " fashion " },
{ " condition " ,  " state " ,  " situation " ,  " circumstance " ,  " predicament " },
{ " conduct " ,  " manage " ,  " direct " ,  " control " ,  " supervise " },
{ " connect " ,  " join " ,  " link " ,  " associate " ,  " tie " },
{ " consider " ,  " think about " ,  " ponder " ,  " reflect " ,  " ruminate " },
{ " constant " ,  " steadfast " ,  " unchanging " ,  " unfaltering " ,  " unwavering " },
{ " construct " ,  " build " ,  " erect " ,  " fabricate " ,  " create " },
{ " contain " ,  " hold " ,  " enclose " ,  " embrace " ,  " comprise " },
{ " continue " ,  " go on " ,  " persist " ,  " endure " ,  " last " },
{ " control " ,  " direct " ,  " manage " ,  " conduct " ,  " supervise " },
{ " convenient " ,  " handy " ,  " useful " ,  " expedient " ,  " time-saving " },
{ " copy " ,  " duplicate " ,  " reproduce " ,  " clone " ,  " transcribe " },
{ " correct " ,  " right " ,  " accurate " ,  " factual " ,  " verifiable " },
{ " cost " ,  " price " ,  " charge " ,  " tariff " ,  " fee " },
{ " courage " ,  " bravery " ,  " daring " ,  " fearlessness " ,  " valor " },
{ " create " ,  " make " ,  " form " ,  " construct " ,  " fashion " },
{ " cry " ,  " weep " ,  " sob " ,  " bawl " ,  " snivel " },
{ " disappear " ,  " vanish " ,  " evaporate " ,  " fade away " ,  " go missing " },
{ " disappoint " ,  " let down " ,  " frustrate " ,  " fail to meet expectations " ,  " fail to fulfill " },
{ " discover " ,  " find " ,  " uncover " ,  " detect " ,  " ascertain " },
{ " discuss " ,  " talk about " ,  " debate " ,  " converse " ,  " parley " },
{ " perform " ,  " accomplish " ,  " execute " ,  " carry out " },
{ " doubt " ,  " question " ,  " speculate " ,  " hesitate " ,  " waver " },
{ " dream " ,  " imagine " ,  " fantasize " ,  " flit through the mind " ,  " muse " },
{ " doubtful " ,  " uncertain " ,  " speculative " ,  " undecided" ,  " inconclusive " },
{ " dry " ,  " arid " ,  " parched" ,  " dehydrated" ,  " waterless " },
{ " earn " ,  " make " ,  " receive " ,  " get " ,  " obtain " },
{ " easy " ,  " simple " ,  " uncomplicated" ,  " undemanding " ,  " effortless " },
{ " educate " ,  " teach " ,  " instruct " ,  " train " ,  " school " },
{ " efficient " ,  " effective " ,  " productive " ,  " time-saving " ,  " resourceful " },
{ " effort " ,  " exertion " ,  " trouble " ,  " pains " ,  " drudgery " },
{ " else " ,  " other " ,  " different " ,  " alternative " ,  " further " },
{ " empty " ,  " vacant " ,  " unoccupied" ,  " bare " ,  " desolate " },
{ " endanger " ,  " imperil " ,  " threaten " ,  " jeopardize " ,  " expose " },
{ " end " ,  " finish " ,  " terminate " ,  " complete " ,  " culminate " },
{ " enjoy " ,  " like " ,  " appreciate " ,  " love " ,  " relish " },
{ " enough " ,  " sufficient " ,  " adequate " ,  " ample " ,  " plentiful " },
{ " enter " ,  " go in " ,  " penetrate " ,  " gain entry to " ,  " access " },
{ " entertain " ,  " amuse " ,  " interest " ,  " delight " ,  " fascinate " },
{ " enthusiastic " ,  " eager " ,  " excited" ,  " ardent " ,  " zealous " },
{ " environment " ,  " surroundings " ,  " habitat " ,  " milieu " ,  " locality " },
{ " equal " ,  " same " ,  " identical " ,  " equivalent " ,  " comparable " },
{ " equal " ,  " same " ,  " identical " ,  " equivalent " ,  " comparable " },
{ " escape " ,  " flee " ,  " run away " ,  " break free " ,  " evade " },
{ " establish " ,  " set up " ,  " found " ,  " institute " ,  " create " },
{ " evaluate " ,  " assess " ,  " judge " ,  " rate " ,  " appraise " },
{ " excellent" ,  " superb" ,  " outstanding" ,  " first-rate" ,  " top-notch" },
{ " expect " ,  " anticipate " ,  " look forward to " ,  " hope " ,  " foresee " },
{ " explain " ,  " clarify " ,  " interpret " ,  " define " ,  " elaborate " },
{ " fail " ,  " not succeed" ,  " be unsuccessful " ,  " flunk " ,  " drop out " },
{ " fall " ,  " drop " ,  " tumble " ,  " pitch " ,  " decline " },
{ " famous " ,  " renowned" ,  " celebrated" ,  " distinguished" ,  " illustrious " },
{ " fear " ,  " dread " ,  " apprehend " ,  " be afraid of " ,  " shudder " },
{ " feel " ,  " sense " ,  " perceive " ,  " experience " ,  " understand " },
{ " few " ,  " little " ,  " scant " ,  " meager " ,  " sparse " },
{ " fight " ,  " battle " ,  " struggle " ,  " contend " ,  " wrestle " },
{ " final " ,  " last " ,  " concluding " ,  " terminal " ,  " ultimate " },
{ " find " ,  " discover " ,  " locate " ,  " uncover " ,  " detect " },
{ " finish " ,  " end " ,  " complete " ,  " terminate " ,  " culminate " },
{ " firm " ,  " solid " ,  " stable " ,  " secure " ,  " unshakable " },
{ " first " ,  " initial " ,  " primary " ,  " foremost " ,  " leading " },
{ " fit " ,  " suitable " ,  " appropriate " ,  " proper " ,  " right " },
{ " fix " ,  " repair " ,  " mend " ,  " restore " ,  " rejuvenate " },
{ " follow " ,  " pursue " ,  " chase " ,  " tail " ,  " go after " },
{ " forget " ,  " neglect " ,  " disregard " ,  " ignore " ,  " omit " },
{ " forgive " ,  " pardon " ,  " absolve " ,  " conceive " ,  " condone " },
{ " forgive " ,  " pardon " ,  " absolve " ,  " conceive " ,  " condone " },
{ " free " ,  " liberate " ,  " release " ,  " unshackle " ,  " unchain " },
{ " friend " ,  " companion " ,  " ally " ,  " associate " ,  " confidant " },
{ " full " ,  " complete " ,  " whole " ,  " ample " ,  " abundant " },
{ " fun " ,  " enjoyable " ,  " pleasant " ,  " entertaining " ,  " amusing " },
{ " gain " ,  " acquire " ,  " obtain " ,  " earn " ,  " collect " },
{ " general " ,  " overall " ,  " universal " ,  " comprehensive " ,  " catholic " },
{ " gentle " ,  " mild " ,  " kind " ,  " tender " ,  " soothing " },
{ " give " ,  " donate " ,  " present " ,  " grant " ,  " award " },
{ " go " ,  " proceed" ,  " move " ,  " travel " ,  " journey " },
{ " good " ,  " excellent " ,  " fine " ,  " first-rate " ,  " top-notch " },
{ " great " ,  " large " ,  " big " ,  " enormous " ,  " immense " },
{ " greedy " ,  " avaricious " ,  " covetous " ,  " menial " ,  " stingy " },
{ " grow " ,  " develop " ,  " mature " ,  " evolve " ,  " progress " },
{ " handsome" ,  " good-looking" ,  " attractive" ,  " striking" },
{ " hard " ,  " difficult " ,  " tough " ,  " arduous " ,  " strenuous " },
{ " hate " ,  " detest " ,  " loathe " ,  " abhor " ,  " despise " },
{ " healthy " ,  " fit " ,  " sound " ,  " hale " ,  " robust " },
{ " help " ,  " assist " ,  " aid " ,  " support " ,  " succor " },
{ " hope " ,  " wish " ,  " desire " ,  " anticipate " ,  " expect " },
{ " hot " ,  " warm " ,  " boiling " ,  " scorching " ,  " blazing " },
{ " hurt " ,  " injure " ,  " wound " ,  " damage " ,  " harm " },
{ " idea " ,  " thought " ,  " notion " ,  " concept " ,  " conception " },
{ " important " ,  " significant " ,  " major " ,  " critical " ,  " essential " },
{ " improve " ,  " better " ,  " enhance " ,  " perfect " ,  " refine " },
{ " include " ,  " contain " ,  " embrace " ,  " incorporate " ,  " encompass " },
{ " increase " ,  " grow " ,  " expand " ,  " enlarge " ,  " multiply " },
{ " individual " ,  " person " ,  " being " ,  " soul " ,  " self " },
{ " intelligent " ,  " smart " ,  " bright " ,  " clever " ,  " shrewd " },
{ " interesting" ,  " absorbing" ,  " fascinating" ,  " intriguing" ,  " entertaining" },
{ " invent " ,  " create " ,  " design " ,  " devise " ,  " conceive " },
{ " invite " ,  " request " ,  " solicit " ,  " lure " ,  " tempt " },
{ " old " ,  " aged" ,  " elderly " ,  " mature " ,  " long-standing" },
{ " open " ,  " reveal " ,  " uncover " ,  " disclose " ,  " divulge " },
{ " opportune " ,  " convenient " ,  " favorable " ,  " timely " ,  " apt " },
{ " order " ,  " command " ,  " instruct " ,  " direct " ,  " mandate " },
{ " organize " ,  " arrange " ,  " systematize " ,  " classify " ,  " categorize " },
{ " original " ,  " new " ,  " fresh " ,  " unprecedented" ,  " unique " },
{ " panic " ,  " fear " ,  " fright " ,  " terror " ,  " alarm " },
{ " patient " ,  " tolerant " ,  " forbearing " ,  " long-suffering " ,  " understanding " },
{ " peace " ,  " tranquility " ,  " calm " ,  " quiet " ,  " tranquillity " },
{ " perfect " ,  " flawless " ,  " immaculate " ,  " faultless " ,  " unblemished" },
{ " perform " ,  " execute " ,  " accomplish " ,  " carry out " ,  " discharge " },
{ " permit " ,  " allow " ,  " authorize " ,  " consent " ,  " approve " },
{ " personal " ,  " individual " ,  " private " ,  " intimate " ,  " subjective " },
{ " persuade " ,  " convince " ,  " induce " ,  " win over " ,  " bring 'round " },
{ " physical " ,  " bodily " ,  " corporeal " ,  " material " ,  " tangible " },
{ " pick " ,  " choose " ,  " select " ,  " elect " ,  " decide " },
{ " picture " ,  " image " ,  " photograph " ,  " representation " ,  " depiction " },
{ " place " ,  " location " ,  " position " ,  " site " ,  " spot " },
{ " plan " ,  " scheme " ,  " design " ,  " project " ,  " blueprint " },
{ " pleasant " ,  " agreeable " ,  " delightful " ,  " nice " ,  " lovely " },
{ " point " ,  " spot " ,  " place " ,  " location " ,  " area " },
{ " polite " ,  " well-mannered" ,  " courteous " ,  " gracious " ,  " deferential " },
{ " poor " ,  " impoverished" ,  " destitute " ,  " needy " ,  " penniless " },
{ " possible " ,  " feasible " ,  " practicable " ,  " achievable " ,  " attainable " },
{ " powerful " ,  " strong " ,  " mighty " ,  " influential " ,  " potent " },
{ " prefer " ,  " like better " ,  " choose " ,  " select " ,  " opt for " },
{ " prepare " ,  " ready " ,  " make ready " ,  " get ready " ,  " make preparations " },
{ " present " ,  " offer " ,  " give " ,  " submit " ,  " tender " },
{ " job " ,  " occupation " ,  " position " ,  " employment " ,  " work " },
{ " pretty " ,  " attractive " ,  " lovely " ,  " beautiful " ,  " handsome " },
{ " prepare " ,  " ready " ,  " make ready " ,  " get ready " ,  " make preparations " },
{ " present " ,  " offer " ,  " give " ,  " submit " ,  " tender " },
{ " problem " ,  " difficulty " ,  " trouble " ,  " issue " ,  " dilemma " },
{ " quick " ,  " rapid " ,  " swift " ,  " fast " ,  " prompt " },
{ " quiet " ,  " silent " ,  " still " ,  " hushed " ,  " calm " },
{ " raise " ,  " lift " ,  " elevate " ,  " boost " ,  " increase " },
{ " reach " ,  " attain " ,  " arrive at " ,  " get to " ,  " procure " },
{ " ready " ,  " prepared" ,  " set " ,  " primed" ,  " cocked" },
{ " real " ,  " actual " ,  " true " ,  " genuine " ,  " authentic " },
{ " receive " ,  " get " ,  " obtain " ,  " accept " ,  " inherit " },
{ " recent " ,  " new " ,  " late " ,  " fresh " ,  " newfangled" },
{ " recognize " ,  " identify " ,  " know " ,  " discern " ,  " apprehend " },
{ " record " ,  " document " ,  " register " ,  " chronicle " ,  " tabulate " },
{ " regret " ,  " remorse " ,  " sorrow " ,  " mourning " ,  " disappointment " },
{ " regular " ,  " normal " ,  " usual " ,  " standard " ,  " routine " },
{ " relate " ,  " tell " ,  " narrate " ,  " describe " ,  " account for " },
{ " relax " ,  " rest " ,  " unwind " ,  " ease up " ,  " slacken " },
{ " remain " ,  " stay " ,  " linger " ,  " persevere " ,  " continue " },
{ " remember " ,  " recall " ,  " recollect " ,  " memorize " ,  " treasure " },
{ " remove " ,  " take away " ,  " eliminate " ,  " exclude " ,  " displace " },
{ " repeat " ,  " do again " ,  " reiterate " ,  " restate " ,  " rehash " },
{ " replace " ,  " substitute " ,  " exchange " ,  " alternate " ,  " alternate with " },
{ " report " ,  " tell " ,  " narrate " ,  " describe " ,  " communicate " },
{ " require " ,  " need" ,  " want " ,  " demand " ,  " request " },
{ " require " ,  " call for " ,  " demand " ,  " exact " ,  " insist on " ,  " necessitate " ,  " postulate " ,  " prescribe " ,  " stipulate " ,  " urge " },
{ " need" ,  " craven " ,  " desire " ,  " lack " ,  " lack for " ,  " must have " ,  " require " ,  " want " ,  " wish for " },
{ " want " ,  " crave " ,  " desire " ,  " fancy " ,  " hanker for " ,  " long for " ,  " need" ,  " wish for " },
{ " demand " ,  " claim " ,  " exact " ,  " insist on " ,  " require " ,  " requisition " ,  " summon " },
{ " request " ,  " ask for " ,  " beg for " ,  " call for " ,  " desire " ,  " invite " ,  " petition " ,  " plead for " ,  " pray for " ,  " requisition " },
{ " admire " ,  " appreciate " ,  " cherish " ,  " esteem " ,  " fawn on " ,  " honor " ,  " respect " ,  " reverence " ,  " treasure " ,  " value " },
{ " approve " ,  " accede " ,  " assent " ,  " consent " ,  " endorse " ,  " sanction " ,  " support " },
{ " ask " ,  " beg " ,  " call for " ,  " demand " ,  " entreat " ,  " implore " ,  " request " ,  " supplicate " ,  " wish " },
{ " assume " ,  " believe " ,  " concoct " ,  " conjecture " ,  " fancy " ,  " gather " ,  " imagine " ,  " suppose " ,  " think " ,  " visualize " },
{ " care " ,  " be concerned" ,  " cherish " ,  " consider " ,  " deem " ,  " esteem " ,  " fancy " ,  " hold dear " ,  " like " ,  " love " },
{ " cause " ,  " bring about " ,  " effect " ,  " generate " ,  " impel " ,  " initiate " ,  " induce " ,  " produce " ,  " provoke " ,  " stir up " },
{ " change " ,  " alter " ,  " convert " ,  " modify " ,  " mutate " ,  " pervert " ,  " rearrange " ,  " remodel " ,  " transform " ,  " transmute " },
{ " choose " ,  " elect " ,  " pick " ,  " select " ,  " single out " ,  " sift " ,  " sort " ,  " stake " ,  " vote " ,  " wish " },
{ " claim " ,  " assert " ,  " demand " ,  " insist " ,  " maintain " ,  " postulate " ,  " profess " ,  " stake " ,  " suppose " ,  " tend " },
{ " claim " ,  " allege " ,  " aver " ,  " avow " ,  " declare " ,  " maintain " ,  " profess " ,  " state " ,  " swear " ,  " testify " },
{ " assert " ,  " affirm " ,  " allege " ,  " aver " ,  " declare " ,  " maintain " ,  " profess " ,  " state " ,  " swear " ,  " testify " },
{ " demand " ,  " claim " ,  " exact " ,  " insist on " ,  " require " ,  " requisition " ,  " summon " },
{ " insist " ,  " demand " ,  " press " ,  " require " ,  " stake " ,  " urge " },
{ " maintain " ,  " assert " ,  " avow " ,  " declare " ,  " hold " ,  " profess " ,  " state " ,  " swear " ,  " testify " },
{ " postulate " ,  " assume " ,  " hypothesize " ,  " suppose " ,  " theorize " },
{ " profess " ,  " claim " ,  " declare " ,  " maintain " ,  " own " ,  " state " ,  " swear " ,  " testify " },
{ " stake " ,  " assert " ,  " claim " ,  " declare " ,  " maintain " ,  " profess " ,  " state " ,  " swear " ,  " testify " },
{ " suppose " ,  " assume " ,  " conjecture " ,  " guess " ,  " hypothesize " ,  " imagine " ,  " presume " ,  " think " },
{ " tend " ,  " incline " ,  " lean " ,  " likely " ,  " seem " ,  " show " ,  " be disposed" ,  " be likely " ,  " be prone " ,  " be wont " },{ " incline " ,  " lean " ,  " likely " ,  " seem " ,  " show " ,  " be disposed" ,  " be likely " ,  " be prone " ,  " tend " },
{ " apt " ,  " disposed" ,  " liable " ,  " likely " ,  " prone " ,  " suggestive " },
{ " probable " ,  " plausible " ,  " possible " ,  " likely " ,  " seemly " },
{ " appear " ,  " give the impression " ,  " look " ,  " seem " ,  " show " },
{ " inclined" ,  " liable" ,  " prone " ,  " tending" ,  " wanting" },
{ " likely " ,  " probable" ,  " plausible " ,  " possible " ,  " tending" },
{ " apt " ,  " disposed" ,  " liable " ,  " likely " ,  " prone " },
{ " tend " ,  " incline " ,  " lean " ,  " slope " ,  " trend " },
{"plotting ","aware "},{"rare","valuable","hard to obtain","precious","pedantic"},{  "scary ","frightening","perturbing","distressing"},{" wisdom "," knowledge "},{" occassionally "," sometimes "},
{"amazing ","incredible ","unbelievable ","improbable ","fabulous ","wonderful ","fantastic ","astonishing ","astounding ","extraordinary "},
{"answer ","reply ","response ","retort ","solution "},{"holy","divine"},
{"ask ","question ","demand ","request ","expect ","inquire ","query ","interrogate ","examine ","quiz "},
	{"awful","dreadful","terrible","abominable","bad","poor","unpleasant"},{"savy","clever","smart","cunning"},{"legends ","stories ","tales "},{" ideas "," plans "," thoughts "},{"beautiful","pretty","alluring","gorgeous","fantastic"},{" wonderful "," amazing "," great "," awesome "},{" huge "," big "," large "},{" friend "," ally "," comrade "},{" adventurer "," hero "," warrior "," mage "},{"sight for sore eyes","looking powerful today","always a pleasure","I'm pleased to be in your presence","I hope things are going well","you're looking great"},{" journey "," quest "," adventure "},{"chase","pursuit","run after","go after"},{"pleased","happy","satisfied"},{"dreams","aspirations","desires"},
	{
		"Let me begin by saying,", "First of all,", "To start with,", "As an introduction,",
		"To kick things off,", "To get the ball rolling,", "First things first,"
	},

	-- Continuation
	{
		"Moving forward,", "Looking ahead,", "Building on that,", "Expanding on that idea,",
		"Carrying on with that train of thought,", "Following up on what was just said,", "Proceeding with this theme,"    
	},

	-- Clarification
	{
		"Or rather,", "On second thought,", "I should clarify,", "Let me rephrase that,",
		"Actually, to be more precise,", "To put it more accurately,", "What I really meant was,"
	},

	-- Examples
	{
		"For example,", "As an illustration,", "To give an example,", "Specifically,", "In particular,",
		"To name one,", "Such as,", "Including,", "As a case in point,"
	},

	-- Contrast
	{
		"However,", "On the other hand,", "In contrast,", "On the contrary,", "Conversely,",
		"Alternatively,", "Meanwhile,", "Instead,", "But,"
	},

	-- Punctuation
	{
		"Furthermore,", "Therefore,", "Finally,", "Indeed,", "Basically,", "Frankly,",  
		"Generally,", "Specifically,", "Additionally,", "Essentially,"
	},

	-- Opinions
	{
		"I believe,", "In my opinion,", "From my perspective,", "If you ask me,", "I think,"
	},

	-- Agreeing
	{
		"I agree,", "Yes,", "Definitely,", "For sure,", "No doubt,"    
	},

	-- Disagreeing 
	{
		"I disagree,", "No,", "I don't think so,", "I'm not so sure about that,", "I have doubts,"
	},

	-- Asking for opinions
	{
		"What do you think?,", "What is your take?,", "I'm curious to hear your thoughts,", "What's your perspective?", "I'd like your insight,"
	},

	-- Giving suggestions
	{
		"I would suggest,", "Maybe you could,", "You might try,", "Have you considered,", "Perhaps,"
	},

	-- Appreciation
	{
		"I appreciate that,", "Thank you for sharing,", "I am grateful for your perspective,", "I value your input," 
	},

	-- Understanding
	{
		"I understand,", "That makes sense,", "I see where you are coming from,", "I can relate to your view,"
	},

	-- Partial agreement
	{
		"I somewhat agree,", "You have a point, but,", "While I see some validity to that,", "I agree, with some caveats,"
	},

	-- Emotional support
	{
		"I'm here for you,", "You're not alone in this,", "It's understandable to feel that way,", "This too shall pass,", "Better times are ahead,"
	},

	-- Hedging certainty
	{
		"It seems,", "It appears,", "Apparently,", "Presumably,", "Most likely,", "Chances are,"    
	},

	-- Seeking confirmation
	{
		"Does that make sense?,", "Do you follow?,", "Does that resonate?,", "Does this align?,", "Does this land?,"
	},

	-- Seeking agreement
	{
		"Don't you think?,", "Wouldn't you say?,", "You'd agree?,", "Right?,", "Yeah?,"
	},

	-- Encouraging
	{
		"Keep at it!,", "You can do it!,", "Stay strong!,", "Keep persevering!,", "Keep up the great work!,"
	},

	-- Praising
	{
		"Well done!,", "Great job!,", "Kudos to you!,", "You should be proud!,", "Wonderfully executed!,"
	},

	-- Light humor
	{
		"Funny you should say that!,", "The irony is not lost on me!,", "What a hilarious sentiment!,", "The humor is not wasted on me!,", "Such amusing thoughts!,"
	},

	-- Wordless acknowledgment
	{
		"I see,", "Ah,", "Oh,", "Hmm,", "Aha,", "Okay,"} , 

	-- Science
	{
		"According to scientific research,", "Studies have shown that,", "The data suggests,", "Experiments demonstrate,", 
		"There is scientific evidence that,", "Research indicates,", "Analysis reveals,", "The findings confirm that,",
		"Extensive peer-reviewed studies confirm,", "Comprehensive meta-analyses conclude that,",
		"Statistical models predict,", "Simulations support the hypothesis that,",
	},

	-- Technology
	{
		"This technology utilizes,", "The system is powered by,", "The architecture includes,", "The framework leverages,",
		"At the core is,", "The platform incorporates,", "The software implements,", "The algorithm enables,",
		"The hardware configuration consists of,", "The network infrastructure relies on,",
		"Latency is optimized by,", "Scalability is achieved through,"
	},

	-- Academia
	{
		"Scholars have theorized,", "There are competing schools of thought,", "Research indicates,",
		"The field is increasingly focused on,", "Experts have concluded,", "Prominent academics posit that,",
		"Evidence suggests,", "The literature supports,",
		"Leading researchers have demonstrated,", "Academic consensus holds that,", 
		"Data analysis strongly supports,", "The weight of empirical evidence favors,"
	},  

	-- History
	{
		"Historians note that,", "Records suggest,", "Accounts of the time describe,", "Evidence from the era demonstrates,",
		"Archaeology reveals,", "Primary sources show,", "Scholarly analysis reveals,", "Historical precedent indicates,",
		"Letters and diaries from the period indicate,", "Contemporary perspectives establish that,",
		"Interpretations of material evidence suggest,"
	},

	-- General
	{
		"It is clear that,", "We can determine that,", "Evidence confirms,", "There are strong indications that,",
		"Available information reliably shows,", "Credible sources lead to the conclusion that,", "It follows logically that,",
		"Applying rigorously skeptical analysis shows that,", "There is significant verifiable data to demonstrate that,",
		"Any examination of the facts definitively proves that,"
	},
	-- Transitioning topics
	{
		"On another note,", "Changing topics,", "Moving to another subject,", "Switching gears,", 
		"Let's discuss something else for a moment,", "I'd like to talk about something different now,",
		"Shifting focus,", "Turning to another matter,", "Jumping to a new topic,"
	},  

	-- Encouraging participation
	{
		"What are your thoughts?", "I'd love to hear your perspective,", "Please feel free to chime in,",
		"Don't be shy, your point of view is valuable,", "Speak up, I want your input,",
		"Your voice matters here - please share your ideas,", "Help me understand your position - I'm listening,"
	},

	-- Validating feelings
	{
		"Your feelings are completely valid,", "It's understandable to feel that way,", "I can see why you would feel like that,",
		"That would make anyone feel the same way,", "You have every right to feel that way,",
		"I don't blame you for feeling that way,", "Your reaction makes perfect sense,"
	},

	-- Reassurance
	{
		"It will be okay,", "This will pass in time,", "Things will get better,", "Have faith, the future is bright,",
		"Stay positive, you have the strength to get through this,", "Brighter days are ahead,", 
		"Hard times are temporary, better things are coming,"
	},

	-- Asking for repetition
	{
		"Sorry, could you repeat that?,", "My apologies, I didn't quite get that - could you restate?,",
		"Please say that again,", "Pardon me, what was that?", "I'm afraid I didn't catch that, could you repeat?",
		"One more time please?,", "Let me hear that again if you don't mind,"
	},

	-- Clarifying confusion
	{
		"I'm afraid I'm a bit confused,", "You seem to have lost me there,", "Let me make sure I understand correctly,",
		"I want to make sure I'm not missing something - ", "Just to clarify, what do you mean exactly?",
		"You'll have to help me understand what you're saying - ", "I'm trying to follow but got a bit lost - "
	},

	-- Hedging opinions
	{
		"I might be wrong, but,", "Don't quote me on this, but,", "Take this with a grain of salt, but,", 
		"In my limited understanding,", "Without claiming to be an expert,",
		"I could be off base, but,", "I'm no authority, however,", "I'm far from an expert, so," 
	},

	{"that you can wear","that you can put on","that you can dress in","that you can adorn yourself with"},
	{"each one is unique","each one is special","each one is distinct","each one is different"},
	{"It's important to have","It's essential to have","It's vital to have","It's necessary to have"},
	{"the best items equipped","the best items ready","the best items prepared","the best items available"},
	{"for any situation","for any circumstance","for any scenario","for any eventuality"},
	{"have you heard of","do you know of","are you aware of","are you familiar with"},
	{"the legendary key-blade","the mythical key-blade","the fabled key-blade","the legendary key-sword"},
	{"They say those things","They tell of those objects","There are legends of those","They speak of those"},
	{"one of the few things","one of the rare things","one of the scarce things","one of the uncommon things"},
	{"that can defeat the darkness","that can overcome the darkness","that can vanquish the darkness","that can conquer the darkness"},
	{"there is a legend about","there is a myth about","there is a tale about","there is a story about"},
	{"the a powerful keyblade called X-Blade","the a mighty keyblade called X-Blade","the a formidable keyblade called X-Blade","the a robust keyblade called X-Blade"},
	{"it was said only the strongest of wielders could use its might","it was said only the most powerful of wielders could use its force","it was said only the most potent of wielders could use its strength","it was said only the most capable of wielders could use its power"},
	{"and in dire circumstances only!","and in desperate situations only!","and in critical conditions only!","and in urgent cases only!"},
	{"there are many plants, herbs, and materials to collect","there are various plants, herbs, and materials to gather","there are diverse plants, herbs, and materials to acquire","there are numerous plants, herbs, and materials to obtain"},
	{"that can be combined to create stronger items!","that can be mixed to make more powerful items!","that can be blended to produce more potent items!","that can be fused to craft more effective items!"},
	{"It's important to know what's you're looking for.","It's essential to know what you're searching for.","It's vital to know what you're seeking.","It's necessary to know what you're finding."},
	{"They can also sell for a pretty chunk of gold too.","They can also sell for a handsome amount of gold too.","They can also sell for a nice sum of gold too.","They can also sell for a good deal of gold too."},
	{"there are many fish in the seas.","there are various fish in the oceans.","there are diverse fish in the waters.","there are numerous fish in the lakes."},
	{"Some more valuable than others.","Some more precious than others.","Some more costly than others.","Some more expensive than others."},
	{"But all delicious nonetheless!","But all tasty nonetheless!","But all yummy nonetheless!","But all savory nonetheless!"},
	{"Especially if you cook them first.","Especially if you roast them first.","Especially if you grill them first.","Especially if you bake them first."},
	{"there is a nice armor shop around here somewhere.","there is a fine armor shop around here somewhere.","there is a splendid armor shop around here somewhere.","there is a superb armor shop around here somewhere."},
	{"I hear they change stock regularly!","I hear they rotate stock frequently!","I hear they switch stock often!","I hear they update stock constantly!"},
	{"It's important to check back every so often.","It's essential to check back once in a while.","It's vital to check back now and then.","It's necessary to check back from time to time."},
	{"You never know when you will find a really good set of magical armor that perfectly suits your needs.","You never know when you will find a great set of enchanted armor that ideally suits your needs.","You never know when you will find an excellent set of bewitched armor that precisely suits your needs.","You never know when you will find a superb set of charmed armor that exactly suits your needs."},
	{"there is a nice staff shop that caters to mages...","there is a fine staff shop that serves mages...","there is a splendid staff shop that assists mages...","there is a superb staff shop that helps mages..."},
	{"They often have basic staffs and wands stocked but you never know when you may find something special.","They usually have simple staffs and wands stocked but you never know when you might find something extraordinary.","They commonly have plain staffs and wands stocked but you never know when you could find something remarkable.","They frequently have standard staffs and wands stocked but you never know when you may find something amazing."},
	{"They say the best ones have a tradeoff. Like offering your soul to wield it. Creepy!","They say the best ones have a drawback. Like giving up your soul to wield it. Spooky!","They say the best ones have a disadvantage. Like sacrificing your soul to wield it. Scary!","They say the best ones have a downside. Like losing your soul to wield it. Eerie!"},
	{"research has identified over 57 species of the darkness...","research has discovered over 57 species of the darkness...","research has found over 57 species of the darkness...","research has uncovered over 57 species of the darkness..."},
	{"It's said they are based are dominant entities that replicate themselves with the assistance of the dark cloud...","It's said they are based on powerful entities that reproduce themselves with the help of the dark cloud...","It's said they are based off mighty entities that duplicate themselves with the aid of the dark cloud...","It's said they are based upon formidable entities that clone themselves with the support of the dark cloud..."},
	{"It's said sometimes they possess some form of sentience and other times they come in more powerful variants...","It's said sometimes they have some form of intelligence and other times they appear in more potent variants...","It's said sometimes they exhibit some form of awareness and other times they emerge in more effective variants...","It's said sometimes they show some form of consciousness and other times they arise in more forceful variants..."},
	{"it is said those keyblade wielders of legend who were pure of heart could transform into angels.","it is said those keyblade wielders of myth who were innocent of heart could transform into angels.","it is said those keyblade wielders of tale who were virtuous of heart could transform into angels.","it is said those keyblade wielders of story who were noble of heart could transform into angels."},
	{"Magnificent! Imagine having wings and being able to fly! Traveling would be soo much easier.","Splendid! Imagine having wings and being able to soar! Traveling would be soo much simpler.","Wonderful! Imagine having wings and being able to glide! Traveling would be soo much smoother.","Marvelous! Imagine having wings and being able to hover! Traveling would be soo much faster."},
	{"It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon chimeras! Half man, half dragon! Can you believe it? I wonder if they have horns and tails. They must've looked breathtaking and terrifying.","It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon hybrids! Half man, half dragon! Can you imagine it? I wonder if they have scales and claws. They must've looked stunning and horrifying.","It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon crossbreeds! Half man, half dragon! Can you picture it? I wonder if they have wings and fangs. They must've looked amazing and frightening.","It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon mixes! Half man, half dragon! Can you envision it? I wonder if they have spikes and fire. They must've looked awesome and daunting."},
	{"There are many different types of potions.","There are various types of potions.","There are diverse types of potions.","There are numerous types of potions."},
	{"Some heal your health or magic energy while others increase your stats for a limited time.","Some restore your health or magic energy while others boost your stats for a short time.","Some recover your health or magic energy while others enhance your stats for a brief time.","Some replenish your health or magic energy while others raise your stats for a little time."},
	{"It's important to know what you need for each situation. Especially when you're in a pinch. Knowing where your health potions are could mean the different between victory and peril.","It's essential to know what you need for each situation. Especially when you're in a bind. Knowing where your health potions are could mean the difference between success and danger.","It's vital to know what you need for each situation. Especially when you're in a jam. Knowing where your health potions are could mean the difference between triumph and risk.","It's necessary to know what you need for each situation. Especially when you're in a tight spot. Knowing where your health potions are could mean the difference between glory and threat."},
	{"there is a shop somewhere around here that sells capes.","there is a store somewhere around here that sells capes.","there is a market somewhere around here that sells capes.","there is a boutique somewhere around here that sells capes."},
	{"Once you find it you should have a look! I bet you would find something to your liking. If not you can come back. They may have a new inventory for you.","Once you find it you should take a look! I bet you would find something to your taste. If not you can return. They might have a new stock for you.","Once you find it you should give it a look! I bet you would find something to your preference. If not you can come again. They could have a new supply for you.","Once you find it you should have a peek! I bet you would find something to your choice. If not you can revisit. They may have a new selection for you."},
	{"there is a neat little jewelry store around here that sells all types of powerful magic amulets, necklaces and circlets. Each one has powerful unique abilities.","there is a tidy little jewelry store around here that sells all kinds of potent magic amulets, necklaces and circlets. Each one has potent unique abilities.","there is a clean little jewelry store around here that sells all sorts of effective magic amulets, necklaces and circlets. Each one has effective unique abilities.","there is a nice little jewelry store around here that sells all varieties of forceful magic amulets, necklaces and circlets. Each one has forceful unique abilities."},
	{"there is a blacksmith around here somewhere that sells all kinds of sturdy and magical shields! You should have a look. Shields can offer you great defensive and offensive capabilities.","there is a blacksmith around here somewhere that sells all kinds of solid and magical shields! You should take a look. Shields can offer you excellent defensive and offensive capabilities.","there is a blacksmith around here somewhere that sells all kinds of durable and magical shields! You should give it a look. Shields can offer you outstanding defensive and offensive capabilities."},
	{"there is a blacksmith around here somewhere that sells all kinds of durable and magical shields! You should give it a look","there is a blacksmith around here somewhere that sells all kinds of tough and magical shields! You should have a peek","there is a blacksmith around here somewhere that sells all kinds of strong and magical shields! You should take a glance","there is a blacksmith around here somewhere that sells all kinds of hardy and magical shields! You should get a glimpse"},
	{"Shields can offer you great defensive and offensive capabilities.","Shields can offer you excellent defensive and offensive capabilities.","Shields can offer you outstanding defensive and offensive capabilities.","Shields can offer you superb defensive and offensive capabilities."},
	{"due to the amplification of abilities by magic the greatests and most powerful swordsmen undergo much training to dual-wield swords.","due to the enhancement of abilities by magic the best and most potent swordsmen undergo much training to dual-wield swords.","due to the improvement of abilities by magic the finest and most capable swordsmen undergo much training to dual-wield swords.","due to the boost of abilities by magic the top and most skillful swordsmen undergo much training to dual-wield swords."},
	{"there are many tomes of knowledge to discover that may increase your abilities with certain items.","there are various tomes of knowledge to find that might increase your abilities with certain items.","there are diverse tomes of knowledge to uncover that could increase your abilities with certain items.","there are numerous tomes of knowledge to reveal that may increase your abilities with certain items."},
	{"I've heard word of a special sorcerer blacksmith who can increase the capabilities of your weapons...But he requires magical crystals...","I've heard rumor of a special sorcerer blacksmith who can enhance the capabilities of your weapons...But he requires magical crystals...","I've heard gossip of a special sorcerer blacksmith who can improve the capabilities of your weapons...But he requires magical crystals...","I've heard talk of a special sorcerer blacksmith who can boost the capabilities of your weapons...But he requires magical crystals..."},
	{"around here somewhere should be a delightful little food stand that sells a variety of delectable food stuffs. Be sure to shoot them a visit.","around here somewhere should be a lovely little food stand that sells a variety of delicious food stuffs. Be sure to pay them a visit.","around here somewhere should be a charming little food stand that sells a variety of tasty food stuffs. Be sure to give them a visit.","around here somewhere should be a pleasant little food stand that sells a variety of savory food stuffs. Be sure to drop them a visit."},
	{"for mages as they get stronger there are certain abilities they can learn to increase their power. A true mage would master them all.","for mages as they get stronger there are certain abilities they can learn to enhance their power. A true mage would master them all.","for mages as they get stronger there are certain abilities they can learn to improve their power. A true mage would master them all.","for mages as they get stronger there are certain abilities they can learn to boost their power. A true mage would master them all."},
	{"in this region there are over 68 spells for a mage to master. It's important to learn them all to become the strongest mage.","in this region there are over 68 spells for a mage to master. It's essential to learn them all to become the most powerful mage.","in this region there are over 68 spells for a mage to master. It's vital to learn them all to become the most potent mage.","in this region there are over 68 spells for a mage to master. It's necessary to learn them all to become the most capable mage."},
	{"there is a legend about an underground city... In it is said to reside none other than mermaids! Who would've thought? Apparently their culture is completely isolated but only hundreds of years behind us.","there is a myth about an underground city... In it is said to dwell none other than mermaids! Who would've guessed? Apparently their culture is totally isolated but only hundreds of years behind us.","there is a tale about an underground city... In it is said to live none other than mermaids! Who would've imagined? Apparently their culture is utterly isolated but only hundreds of years behind us.","there is a story about an underground city... In it is said to inhabit none other than mermaids! Who would've envisioned? Apparently their culture is entirely isolated but only hundreds of years behind us."},{"It is said,","It is told,","So they say,"},
	{"First,","Firstly,","To begin with,","To start with,","To start off,"},
	{"Furthermore,","Next,","After that,"},
	{"Finally,","In conclusion,","To finish off,","To end things off,"},
	{"Did you know that", "Let me share with you a secret", "You might be curious about"},
	{"Have you ever wondered about", "Let me tell you a story about"},
	{"Speaking of which,","By the way,","On the other hand,","In addition to that","Another thing to consider is","You should also know that"},
	{"As you can see,","I hope you learned something new","That’s all for now,","Thank you for listening,","Until next time,"},{"there are","there is","there exist","there's"},{" stop "," halt "," yield "," end "},
	{"different","various","diverse","numerous"},
	{"items","objects","things","goods"},{"magic","spells","witchcraft","alchemy"},{"the darkness","the dark cloud",",the dark hive","the dark realm","the dark place","the dark plane"},{"begin","start"},
	{"that you can wear","that you can put on","that you can dress in","that you can adorn yourself with"},
	{"each one is unique","each one is special","each one is distinct","each one is different"},
	{"It's important to have","It's essential to have","It's vital to have","It's necessary to have"},
	{"the best items equipped","the best items ready","the best items prepared","the best items available"},
	{"for any situation","for any circumstance","for any scenario","for any eventuality"},
	{"have you heard of","do you know of","are you aware of","are you familiar with"},
	{"the legendary key-blade","the mythical key-blade","the fabled key-blade","the legendary key-sword"},
	{"They say those things","They tell of those objects","There are legends of those","They speak of those"},
	{"one of the few things","pne of the rare things","one of the scarce things","one of the uncommon things"},
	{"that can defeat the darkness","that can overcome the darkness","that can vanquish the darkness","that can conquer the darkness"},
}
local BotResource=resourcedirectory.ChatbotAlgorithm
local tmo= require(BotResource.TweenModule)
local synonympairs={{"hello","hi","hey","greetings"}, {"Hey","Hi","Hello"},
-- Introductory
{"knowledgeable", 	"informed","studied","well-versed","practiced","aware"},{"smoothly","without trial","easy","relaxing","enjoyable"},{"faring","riding","sailing"},{"ditches","pits"},{"careful","insightful","cautious","steady"}
,{"events","things","occurences","situations"},{"Did you know","Were you aware","Have you heard"},{"trapped","stuck","immobile"},{"happening","occuring","going on","preceding"},{"need","require","desire"},{"sparkle in your eye!","keen eye for adventure!","heart of a warrior!","unyielding spirit of a legendary warrior!"},{"legendary","mythical","fabled","powerful","renowned","valiant","glorious"},{"unyielding","determined","hardened","battle-ready","stubborn tenacity"},{"assistance","help"},{"comment","state","share","tell"},{"Howerever,","Moreover,","In addition,","Furthermore,"},{"nothing","not a single thing"},{"share","spread","part"},{"escape","get away"},{"best","greatest"},{"special","unique","one of a kind","one in a billion"},{"offering","bartering","trading"},{"giving","offering"},{"soul","essence","mana","immortal-soul"},{"said,"},{"stocked","available"},{"sells","barters","trades in","has available"},{"find","discover","uncover"},{"looking","searching"},{"liking","enjoyment","privy","tastes","sensitivities"},{"value","worth",},{"given","bestowed","relinquished"},{"quantity","amount"},{"quantities","amounts"},{"devour","consume","feed-on","eat"},{"warp","distort"},{"strong","incredible","powerful"},{"facts","knowledge","matters"},{"infinite","unlimited"},{"conjunction","along with"},{"dimension","place","material plane"},{"regenerate","recouperate","restore"},{"topic","subject"},{"entities","monsters"},{"destructive","chaotic"},{"absorb","assimilate","sap energy from"},{"However,","Morever,","In addition,","Also,","Not to mention,","This includes,"},{"encounter","see"},{"trap","diversion","obstacle"},{"minion","disciple"},{"mindless","thoughtless","brainless","will-less"},{"used","harnessed","portrayed","pictured"},{"touches","makes with contact with","contacts"},{"feeling","doing"},{"infinite","never-ending","limitless"},{"treasures","trinkets","artifacts","loot","spoils"},{"untold","unforeseen","unspoken","unknown"},{"decieve","fool","mislead","misguide"},{"underground","subterranean"},{"unsuspecting","innocent","credulous","easy","simple","unsuspicious"},{"hungry","starving","famished"},{"creature","monster","entity"},{"anything","everything"},{"shape","form","structure"},{"size","volume","area"},
{"happy","joyful","cheerful","glad","delighted"}, {"sad","unhappy","miserable","depressed","sorrowful"}, {"big","large","huge","giant","enormous"}, {"small","tiny","little","miniature","petite"}, {"fast","quick","speedy","swift","rapid"}, {"slow","sluggish","lethargic","lazy","tardy"}, {"smart","intelligent","clever","bright","brilliant"}, {"stupid","dumb","foolish","ignorant","senseless"}, {"funny","humorous","amusing","hilarious","comical"}, {"boring","dull","tedious","uninteresting","monotonous"}, {"angry","mad","furious","irate","livid"}, {"calm","peaceful","serene","tranquil","relaxed"},
{"beautiful","pretty","lovely","gorgeous","stunning"}, {"ugly","hideous","unattractive","repulsive","horrible"}, {"good","great","excellent","wonderful","superb"}, {"bad","terrible","awful","horrible","poor"}, {"easy","simple","effortless","straightforward","smooth"}, {"hard","difficult","challenging","tough","demanding"}, {"hot","warm","heated","boiling","scorching"}, {"cold","cool","chilly","freezing","frosty"}, {"new","fresh","recent","modern","novel"}, {"old","ancient","antique"}, {"rich","wealthy","affluent","prosperous","well-off"},
{"poor","impoverished","destitute","broke"}, {"friendly","pleasant","polite"}, {"mean","rude","nasty","unfriendly","cruel"}, {"quiet","silent","hushed","muted","soft"}, {"dim","gloomy","shadowy","murky"}, {"light","bright","luminous","shiny","radiant"}, {"high","tall","lofty","elevated"},
{"clean","tidy","neat","spotless","immaculate"}, {"dirty","messy","filthy","grimy","sloppy"}, {"strong","powerful","mighty","forceful","sturdy"}, {"weak","feeble","frail","faint","flimsy"}, {"happy","joyful","cheerful","glad","delighted"},{"work","job","function"},
{"accede","agree","consent","comply","yield"},
{"adhere","cling","stick"},
{"adjacent","adjoining","neighboring"} ,{"near","close"},
{"admire","appreciate"} ,  {"esteem","respect","honor"},
{"admonish","caution"},  {"criticize","disapprove","rebuke"},
{"adulterate","corrupt","debase","falsify","pollute"},
{"adventurous","bold","daring","fearless","intrepid"},
{"affable","approachable"} ,  {"courteous","friendly","likable"},
{"affluent","wealthy","well-to-do","well-off","prosperous"},
{"aghast","appalled","horrified","shocked","stunned"},
{"agitate","disturb"} , {"flurry","perturb"},
{"ail","afflict"}, {"bother","distress","trouble"},
{"frighten","scare","startle","terrify"},
{"descend","settle","touch down"},
{"alleviate","mitigate","relieve"},
{"indifferent","reserved","standoffish"},
{"alter","change","modify","transform"},
{"ambiguous","unclear","vague","uncertain"},
{"ambitious","aspiring","enterprising","go-getting","striving"},
{"better","improve","rectify","reform"},
{"amiable","agreeable","congenial","good-natured","pleasant"},
{"ample","abundant","enough","plentiful"},
{"amused","entertained","humored","tickled"},
{"anarchy","chaos","disorder","turmoil"},
{"ancestral","inherited","traditional"},
{"ancient","antique","archaic","old","olden"},
{"angelic","blessed","divine","holy","saintly"},
{"annoy","bother","irk","irritate","vex"},
{"antagonize","annoy","exasperate","frustrate","irritate"},
{"anticipate","expect","forecast","predict","look forward to"},
{"anxious","apprehensive","concerned","worried"},
{"apathetic","indifferent","unconcerned","uninterested","unmoved"},
{"appreciate","admire","cherish"}, {"esteem","value"},
{"applaud","approve","commend"},
{"arrogant","conceited","haughty","proud","vain"},
{"artificial","fake","false","imitation","synthetic"},
{"ascend","climb","mount","rise","soar"},
{"ashamed","embarrassed","humiliated","mortified","sheepish"},
{"assiduous","diligent","industrious","painstaking","sedulous"},
{"assuage","alleviate","ease","mitigate","relieve"},
{"astonish","amaze","astound","surprise","dumbfound"},
{"auspicious","favorable","fortunate","propitious","promising"},
{"authentic","genuine","real","true","unadulterated"},
{"authoritative","dominant","forceful","powerful","influential"},
{"autonomous","independent","self-governing","self-ruling","sovereign"},
{"avert","avoid","deflect","dodge","ward off"},
{"avid","eager","enthusiastic","keen"},
{"happy","joyful","cheerful","glad","delighted"},
{"sad","unhappy","miserable","depressed","sorrowful"},
{"big","large","huge","giant","enormous"},
{"small","tiny","little","miniature","petite"},
{"fast","quick","speedy","swift","rapid"},
{"slow","sluggish","lethargic","lazy","tardy"},
{"smart","intelligent","clever","bright","brilliant"},
{"stupid","dumb","foolish","ignorant","senseless"},
{"funny","humorous","amusing","hilarious","comical"},
{"boring","dull","tedious","uninteresting","monotonous"},
{"angry","mad","furious","irate","livid"},
{"calm","peaceful","serene","tranquil","relaxed"},
{"beautiful","pretty","lovely","gorgeous","stunning"},
{"ugly","hideous","unattractive","repulsive","horrible"},
{"good","great","excellent","wonderful","superb"},
{"bad","terrible","awful","horrible","poor"},
{"easy","simple","effortless","straightforward","smooth"},
{"hard","difficult","challenging","tough","demanding"},
{"hot","warm","heated","boiling","scorching"},
{"cold","cool","chilly","freezing","frosty"},
{"new","fresh","recent","modern","novel"},
{"old","ancient","antique"},
{"rich","wealthy","affluent","prosperous","well-off"},
{"poor","impoverished","destitute","broke"},
{"friendly","pleasant","polite"},
{"mean","rude","nasty","unfriendly","cruel"},
{"quiet","silent","hushed","muted","soft"},
{"dim","gloomy","shadowy","murky"},
{"bright","luminous","shiny","radiant"},
{"lofty","elevated"},
{"clean","tidy","neat","spotless","immaculate"},
{"abandon","desert","forsake","leave","neglect"},
{"abuse","mistreat","maltreat","ill-treat","exploit"},
{"accept","receive","welcome","greet","take"},
{"accurate","correct","precise","exact","factual"},
{"achieve","accomplish","complete","fulfill","attain"},
{"acknowledge","admit","confess","grant","recognize"},
{"acquaintance","friend","associate","contact","relation"},
{"solve","perform","practice"},
{"add","increase"}, {"supplement","augment"},
{"admire","respect"} , {"esteem","honor","venerate"},
{"adult","grown-up","mature","full-grown","grown"},
{"afraid","scared","frightened","terrified","apprehensive"},
{"agree","consent","comply"}, {"accede","assent"},
{"aim","goal","objective","target","purpose"},
{"alive","living","animate","existent","subsisting"},
{"all","whole","entire","complete","total"},
{"allow","permit","let","authorize","consent"},
{"alone","single","un accompanied","unison","unshared"},
{"alternate","change","vary","alternate","substitute"},
{"always","constantly","forever","eternally","perpetually"},
{"amaze","astonish","as tound","surprise","dumbfound"},
{"ancestor","forefather","progenitor","forebear","parent"},
{"anger","rage","fury","ire","wrath"},
{"angry","enraged","furious","irate","mad"},
{"answer","reply","respond","correspond","rejoin"},
{"apology","regret","excuse","mea culpa","remorse"},
{"appear","seem","look","emerge","materialize"},
{"appreciate","value","esteem","cherish","prize"},
{"approve","endorse","sanction","support","commend"},
{"argue","debate","dispute","controvert","wrangle"},
{"arm","weapon","armament","munition","ordnance"},
{"arrive","come","reach","attain","get"},
{"ask","request","demand","entreat","implore"},
{"assemble","gather","collect","convene","muster"},
{"assist","help","aid","support","succor"},
{"assure","ensure","insure","guarantee","vouch for"},
{"attack","assault","invade","raid","strike"},
{"attend","be present","go to","watch","observe"},
{"authority","power","control","command","jurisdiction"},
{"avoid","evade","shun","keep away from","forgo"},
{"back","support","endorse","champion","vindicate"},
{"bad","evil","wicked","vicious","malevolent"},
{"balance","equilibrium","poise","steadiness","stability"},
{"beautiful","pretty","lovely","gorgeous","stunning"},
{"beg","plead","implore","supplicate","beseech"},
{"belief","faith","trust","conviction","credence"},
{"bend","curve","lean","incline","bow"},
{"benefit","advantage","profit","good","boon"},
{"best","excellent","superb","first-rate","top-notch"},
{"betray","desert","forsake","treacherous","unfaithful"},
{"big","large","huge","gigantic","enormous"},
{"bind","tie","fasten","secure","immobilize"},
{"bless","favor","glorify","sanctify","hallow"},
{"blind","sightless","unseeing","unsighted","invisible"},
{"blood","gore","haemorrhage","sanguine","crimson"},
{"body","physique","frame","corpus","corpuscle"},
{"bold","brave","courageous","daring","intrepid"},
{"born","born","begotten","derived","sprouted"},
{"borrow","lend","use","take","appropriate"},
{"break","smash","shattered","splinter","shatter"},
{"brief","short","concise","terse","succinct"},
{"bright","brilliant","luminous","radiant","glowing"},
{"broken","damaged","fractured","shattered","impaired"},
{"build","construct","erect","fabricate","create"},
{"burden","load","encumber","weigh down","oppress"},
{"busy","occupied","engaged","occupied","tied up"},
{"buy","purchase","acquire","procure","obtain"},
{"buy","purchase","acquire","procure","obtain"},
{"calm","tranquil","serene","placid","unruffled"},
{"careful","cautious","circumspect","wary","vigilant"},
{"cause","create","generate","produce","effect"},
{"certain","sure","positive","confident","convinced"},
{"change","alter","modify","transform","convert"},
{"character","personality","nature","disposition","temperament"},
{"child","kid","infant","toddler","youngster"},
{"choose","select","pick","decide","elect"},
{"circle","ring","orb","disc","halo"},
{"class","category","group","division","sort"},
{"clean","spotless","immaculate","neat","tidy"},
{"clear","transparent","lucid","unclouded","unobstructed"},
{"clever","bright","intelligent","sharp","shrewd"},
{"close","near","adjacent","contiguous","in close proximity"},
{"clothe","dress","attire","garb","outfit"},
{"cold","chilly","cool","freezing","icy"},
{"collect","gather","assemble","muster","round up"},
{"combine","unite","join","merge","fuse"},
{"comfort","console","soothe","reassure","placate"},
{"common","ordinary","unexceptional","unremarkable","usual"},
{"compare","contrast","equate","match","relate"},
{"complete","finish","end","finalize","consummate"},
{"compose","write","create","form","fashion"},
{"condition","state","situation","circumstance","predicament"},
{"conduct","manage","direct","control","supervise"},
{"connect","join","link","associate","tie"},
{"consider","think about","ponder","reflect","ruminate"},
{"constant","steadfast","unchanging","unfaltering","unwavering"},
{"construct","build","erect","fabricate","create"},
{"contain","hold","enclose","embrace","comprise"},
{"continue","go on","persist","endure","last"},
{"control","direct","manage","conduct","supervise"},
{"convenient","handy","useful","expedient","time-saving"},
{"copy","duplicate","reproduce","clone","transcribe"},
{"correct","right","accurate","factual","verifiable"},
{"cost","price","charge","tariff","fee"},
{"courage","bravery","daring","fearlessness","valor"},
{"create","make","form","construct","fashion"},
{"cry","weep","sob","bawl","snivel"},
{"disappear","vanish","evaporate","fade away","go missing"},
{"disappoint","let down","frustrate","fail to meet expectations","fail to fulfill"},
{"discover","find","uncover","detect","ascertain"},
{"discuss","talk about","debate","converse","parley"},
{"perform","accomplish","execute","carry out"},
{"doubt","question","speculate","hesitate","waver"},
{"dream","imagine","fantasize","flit through the mind","muse"},
{"doubtful","uncertain","speculative","undecided","inconclusive"},
{"dry","arid","parched","dehydrated","waterless"},
{"earn","make","receive","get","obtain"},
{"easy","simple","uncomplicated","undemanding","effortless"},
{"educate","teach","instruct","train","school"},
{"efficient","effective","productive","time-saving","resourceful"},
{"effort","exertion","trouble","pains","drudgery"},
{"else","other","different","alternative","further"},
{"empty","vacant","unoccupied","bare","desolate"},
{"endanger","imperil","threaten","jeopardize","expose"},
{"end","finish","terminate","complete","culminate"},
{"enjoy","like","appreciate","love","relish"},
{"enough","sufficient","adequate","ample","plentiful"},
{"enter","go in","penetrate","gain entry to","access"},
{"entertain","amuse","interest","delight","fascinate"},
{"enthusiastic","eager","excited","ardent","zealous"},
{"environment","surroundings","habitat","milieu","locality"},
{"equal","same","identical","equivalent","comparable"},
{"equal","same","identical","equivalent","comparable"},
{"escape","flee","run away","break free","evade"},
{"establish","set up","found","institute","create"},
{"evaluate","assess","judge","rate","appraise"},
{"excellent","superb","outstanding","first-rate","top-notch"},
{"expect","anticipate","look forward to","hope","foresee"},
{"explain","clarify","interpret","define","elaborate"},
{"fail","not succeed","be unsuccessful","flunk","drop out"},
{"fall","drop","tumble","pitch","decline"},
{"famous","renowned","celebrated","distinguished","illustrious"},
{"fear","dread","apprehend","be afraid of","shudder"},
{"feel","sense","perceive","experience","understand"},
{"few","little","scant","meager","sparse"},
{"fight","battle","struggle","contend","wrestle"},
{"final","last","concluding","terminal","ultimate"},
{"find","discover","locate","uncover","detect"},
{"finish","end","complete","terminate","culminate"},
{"firm","solid","stable","secure","unshakable"},
{"first","initial","primary","foremost","leading"},
{"suitable","appropriate","proper"},
{"fix","repair","mend","restore","rejuvenate"},
{"follow","pursue","chase","tail","go after"},
{"forget","neglect","disregard","ignore","omit"},
{"forgive","pardon","absolve","conceive","condone"},
{"forgive","pardon","absolve","conceive","condone"},
{"free","liberate","release","unshackle","unchain"},
{"friend","companion","ally","associate","confidant"},
{"full","complete","whole","ample","abundant"},
{"fun","enjoyable","pleasant","entertaining","amusing"},
{"gain","acquire","obtain","earn","collect"},
{"general","overall","universal","comprehensive","catholic"},
{"gentle","mild","kind","tender","soothing"},
{"give","donate","present","grant","award"},
{"go","proceed","move","travel","journey"},
{"good","excellent","fine","first-rate","top-notch"},
{"great","large","big","enormous","immense"},
{"greedy","avaricious","covetous","menial","stingy"},
{"grow","develop","mature","evolve","progress"},
{"handsome","good-looking","attractive","striking"},
{"hard","difficult","tough","arduous","strenuous"},
{"hate","detest","loathe","abhor","despise"},
{"healthy","fit","sound","robust"},
{"help","assist","aid","support","succor"},
{"hope","wish","desire","anticipate","expect"},
{"hot","warm","boiling","scorching","blazing"},
{"hurt","injure","wound","damage","harm"},
{"idea","thought","notion","concept","conception"},
{"important","significant","major","critical","essential"},
{"improve","better","enhance","perfect","refine"},
{"include","contain","embrace","incorporate","encompass"},
{"increase","grow","expand","enlarge","multiply"},
{"individual","person","being","soul","self"},
{"intelligent","smart","bright","clever","shrewd"},
{"interesting","absorbing","fascinating","intriguing","entertaining"},
{"invent","create","design","devise","conceive"},
{"invite","request","solicit","lure","tempt"},
{"old","aged","elderly","mature","long-standing"},
{"open","reveal","uncover","disclose","divulge"},
{"opportune","convenient","favorable","timely","apt"},
{"order","command","instruct","direct","mandate"},
{"organize","arrange","systematize","classify","categorize"},
{"original","new","fresh","unprecedented","unique"},
{"panic","fear","fright","terror","alarm"},
{"patient","tolerant","forbearing","long-suffering","understanding"},
{"peace","tranquility","calm","quiet","tranquillity"},
{"perfect","flawless","immaculate","faultless","unblemished"},
{"perform","execute","accomplish","carry out","discharge"},
{"permit","allow","authorize","consent","approve"},
{"personal","individual","private","intimate","subjective"},
{"persuade","convince","induce","win over","bring 'round"},
{"physical","bodily","corporeal","material","tangible"},
{"pick","choose","select","elect","decide"},
{"picture","image","photograph","representation","depiction"},
{"place","location","position","site","spot"},
{"plan","scheme","design","project","blueprint"},
{"pleasant","agreeable","delightful","nice","lovely"},
{"point","spot","place","location","area"},
{"polite","well-mannered","courteous","gracious","deferential"},
{"poor","impoverished","destitute","needy","penniless"},
{"possible","feasible","practicable","achievable","attainable"},
{"powerful","strong","mighty","influential","potent"},
{"prefer","like better","choose","select","opt for"},
{"prepare","ready","make ready","get ready","make preparations"},
{"present","offer","give","submit","tender"},
{"job","occupation","position","employment","work"},
{"pretty","attractive","lovely","beautiful","handsome"},
{"prepare","ready","make ready","get ready","make preparations"},
{"present","offer","give","submit","tender"},
{"problem","difficulty","trouble","issue","dilemma"},
{"quick","rapid","swift","fast","prompt"},
{"quiet","silent","still","hushed","calm"},
{"raise","lift","elevate","boost","increase"},
{"reach","attain","arrive at","get to","procure"},
{"ready","prepared","set","primed","cocked"},
{"real","actual","true","genuine","authentic"},
{"receive","get","obtain","accept","inherit"},
{"recent","new","late","fresh","newfangled"},
{"recognize","identify","know","discern","apprehend"},
{"record","document","register","chronicle","tabulate"},
{"regret","remorse","sorrow","mourning","disappointment"},
{"regular","normal","usual","standard","routine"},
{"relate","tell","narrate","describe","account for"},
{"relax","rest","unwind","ease up","slacken"},
{"remain","stay","linger","persevere","continue"},
{"remember","recall","recollect","memorize","treasure"},
{"remove","take away","eliminate","exclude","displace"},
{"repeat","do again","reiterate","restate","rehash"},
{"replace","substitute","exchange","alternate","alternate with"},
{"report","tell","narrate","describe","communicate"},
{"require","need","want","demand","request"},
{"require","call for","demand","exact","insist on","necessitate","postulate","prescribe","stipulate","urge"},
{"need","craven","desire","lack","lack for","must have","require","want","wish for"},
{"want","crave","desire","fancy","hanker for","long for","need","wish for"},
{"demand","claim","exact","insist on","require","requisition","summon"},
{"request","ask for","beg for","call for","desire","invite","petition","plead for","pray for","requisition"},
{"admire","appreciate","cherish","esteem","fawn on","honor","respect","reverence","treasure","value"},
{"approve","accede","assent","consent","endorse","sanction","support"},
{"ask","beg","call for","demand","entreat","implore","request","supplicate","wish"},
{"assume","believe","concoct","conjecture","fancy","gather","imagine","suppose","think","visualize"},
{"care","be concerned","cherish","consider","deem","esteem","fancy","hold dear","like","love"},
{"cause","bring about","effect","generate","impel","initiate","induce","produce","provoke","stir up"},
{"change","alter","convert","modify","mutate","pervert","rearrange","remodel","transform","transmute"},
{"choose","elect","pick","select","single out","sift","sort","stake","vote","wish"},
{"claim","assert","demand","insist","maintain","postulate","profess","stake","suppose","tend"},
{"claim","allege","aver","avow","declare","maintain","profess","state","swear","testify"},
{"assert","affirm","allege","aver","declare","maintain","profess","state","swear","testify"},
{"demand","claim","exact","insist on","require","requisition","summon"},
{"insist","demand","press","require","stake","urge"},
{"maintain","assert","avow","declare","hold","profess","state","swear","testify"},
{"postulate","assume","hypothesize","suppose","theorize"},
{"profess","claim","declare","maintain","own","state","swear","testify"},
{"stake","assert","claim","declare","maintain","profess","state","swear","testify"},
{"suppose","assume","conjecture","guess","hypothesize","imagine","presume","think"},
{"tend","incline","lean","likely","seem","show","be disposed","be likely","be prone","be wont"},{"incline","lean","likely","seem","show","be disposed","be likely","be prone","tend"},
{"apt","disposed","liable","likely","prone","suggestive"},
{"probable","plausible","possible","likely","seemly"},
{"appear","give the impression","look","seem","show"},
{"inclined","liable","prone","tending","wanting"},
{"likely","probable","plausible","possible","tending"},
{"apt","disposed","liable","likely","prone"},
{"tend","incline","lean","slope","trend"},
{"plotting","aware"},{"rare","valuable","hard to obtain","precious","pedantic"},{"scary","frightening","perturbing","distressing"},{"wisdom","knowledge"},{"Hello","Hi","Hey","Greetings"},{"occassionally","sometimes"},
{"amazing","incredible","unbelievable","improbable","fabulous","wonderful","fantastic","astonishing","astounding","extraordinary"},
{"answer","reply","response","retort","solution"},{"holy","divine"},
{"ask","question","demand","request","expect","inquire","query","interrogate","examine","quiz"},
{"awful","dreadful","terrible","abominable","bad","poor","unpleasant"},{"savy","clever","smart","cunning"},{"legends","stories","tales"},{"ideas","plans","thoughts"},{"beautiful","pretty","alluring","gorgeous","fantastic"},{"wonderful","amazing","great","awesome"},{"huge","big","large"},{"friend","ally","comrade"},{"adventurer","hero","warrior","mage"},{"sight for sore eyes","looking powerful today","always a pleasure","I'm pleased to be in your presence","I hope things are going well","you're looking great"},{"journey","quest","adventure"},{"chase","pursuit","run after","go after"},{"pleased","happy","satisfied"},{"dreams","aspirations","desires"}
}
--[[local nouns={"account","middle","act","milk","adjustment","mind","advertisement",
	"mine","agreement","minute","air","mist","amount","money","amusement","month"
	,"animal","morning","answer","mother","apparatus","motion ","approval","mountain ","argument","move ","art", "music ","attack","name ","attempt","nation","attention","need ","attraction","news ","authority","night ","back","noise ","balance","note base","number ","behavior","observation ","belief","offer ","birth","oil ","bit","operation ","bite", "opinion ","blood","order ","blow","organization ","body","ornament ","brass","owner ","bread","page ","breath","pain ", "brother","paint ","building","paper ","burn","part ","burst","paste ","business","payment ","butter","peace ","canvas", "person ","care","place ","cause","plant ","chalk","play ","chance","pleasure ","change","point ","cloth","poison ","coal" ,"polish ","color","porter ","comfort","position ","committee","powder ","company","power ","comparison","price", "competition","print ","condition","process ","connection","produce ","control","profit ","cook","property ","copper" ,"prose ","copy","protest ","cork","pull ","copy","punishment ","cough","purpose ","country","push ","cover","quality " ,"crack","question ","credit","rain ","crime","range ","crush","rate ","cry","ray ","current","reaction ","curve", "reading ","damage","reason ","danger","record ","daughter","regret ","day","relation ","death","religion ","debt","representative", "decision","request ","degree","respect ","design","rest ","desire","reward ","destruction","rhythm ","detail","rice ","development","river ","digestion","road ","direction","roll ","discovery","room ","discussion","rub ","disease","rule ","disgust","run ","distance","salt ","distribution","sand ","division","scale ","doubt","science ","drink","sea ","driving","seat ","dust","secretary ","earth","selection ","edge","self ","education","sense ","effect","servant ","end"," sex ","error","shade ","event","shake ","example","shame ","exchange","shock ","existence","side ","expansion","sign ","experience","silk ","expert","silver ","fact","sister ","fall","size ","family","sky ","father","sleep ","fear","slip ","feeling","slope ","fiction","smash ","field","smell ","fight","smile ","fire","smoke ","flame","sneeze ","flight","snow ","flower","soap ","fold","society ","food","son ","force","song ","form","sort ","friend","sound ","front","soup ","fruit","space ","glass","stage ","gold","start ","government","statement ","grain","steam ","grass","steel ","grip","step ","group","stitch ","growth","stone ","guide","stop ","harbor","story ","harmony","stretch ","hate","structure ","hearing","substance ","heat","sugar ","help","suggestion ","history","summer ","hole","support ","hope","surprise ","hour","swim ","humor","system ","ice","talk ","idea","taste ","impulse","tax ","increase","teaching ","industry","tendency ","ink","test ","insect","theory ","instrument","thing ","insurance","thought ","interest","thunder ","invention","time ","iron","tin ","jelly","top ","join","touch ","journey","trade ","judge","transport ","jump","trick ","kick","trouble ","kiss","turn ","knowledge","twist ","land","unit ","language","use ","laugh","value ","low","verse ","lead","vessel ","learning","view ","leather","voice ","letter","walk ","level","war ","lift","wash ","light","waste ","limit","water ","linen","wave ","liquid","wax ","list","way ","look","weather ","loss","week ","love","weight ","machine","wind ","man","wine ","manager","winter ","mark","woman ","market","wood ","mass","wool ","meal","word ","measure","work ","meat","wound ","meeting","writing ","memory","year ","metal"," ","specific nouns ","angle","knee ","ant","knife ","apple","knot ","arch","leaf ","arm","leg ","army","library ","baby","line ","bag","lip ","ball","lock ","band","map ","basin","match ","basket","monkey ","bath","moon ","bed","mouth ","bee","muscle ","bell","nail ","berry","neck ","bird","needle ","blade","nerve ","board","net ","boat","nose ","bone","nut ","book","office ","boot","orange ","bottle","oven ","box","parcel ","boy","pen ","brain","pencil ","brake","picture ","branch","pig ","brick","pin ","bridge","pipe ","brush","plane ","bucket","plate ","bulb","plough ","button","pocket ","cake","pot ","camera","potato ","card","prison ","carriage","pump ","cart","rail ","cat","rat ","chain","receipt ","cheese","ring ","chess","rod ","chin","roof ","church","root ","circle","sail ","clock","school ","cloud","scissors ","coat","screw ","collar","seed ","comb","sheep ","cord","shelf ","cow","ship ","cup","shirt ","curtain","shoe ","cushion","skin ","dog","skirt ","door","snake ","drain","sock ","drawer","spade ","dress","sponge ","drop","spoon ","ear","spring ","egg","square ","engine","stamp ","eye","star ","face","station ","farm","stem ","feather","stick ","finger","stocking ","fish","stomach ","flag","store ","floor","street ","fly","sun ","foot","table ","fork","tail ","fowl","thread ","frame","throat ","garden","thumb ","girl","ticket ","glove","toe ","goat","tongue ","gun","tooth ","hair","town ","hammer","train ","hand","tray ","hat","tree ","head","trousers ","heart","umbrella ","hook","wall ","horn","watch ","horse","wheel ","hospital","whip ","house","whistle ","island","window ","jewel","wing ","kettle","wire ","key","worm" ,"actor","gold","painting", "advertisement","grass","parrot", "afternoon","greece","pencil", "airport","guitar","piano", "ambulance","hair","pillow", "animal","hamburger","pizza", "answer","helicopter","planet", "apple","helmet","plastic", "army","holiday","portugal", "australia","honey","potato", "balloon","horse","queen", "banana","hospital","quill", "battery","house","rain", "beach","hydrogen","rainbow", "beard","ice","raincoat", "bed","insect","refrigerator", "belgium","insurance","restaurant", "boy","iron","river", "branch","island","rocket", "breakfast","jackal","room", "brother","jelly","rose", "camera","jewellery","russia", "candle","jordan","sandwich", "car","juice","school", "caravan","kangaroo","scooter", "carpet","king","shampoo", "cartoon","kitchen","shoe", "china","kite","soccer", "church","knife","spoon", "crayon","lamp","stone", "crowd","lawyer","sugar", "daughter","leather","sweden", "death","library","teacher", "denmark","lighter","telephone", "diamond","lion","television", "dinner","lizard","tent", "disease","lock","thailand", "doctor","london","tomato", "dog","lunch","toothbrush", "dream","machine","traffic", "dress","magazine","train", "easter","magician","truck", "egg","manchester","uganda", "eggplant","market","umbrella", "egypt","match","van", "elephant","microphone","vase", "energy","monkey","vegetable", "engine","morning","vulture", "england","motorcycle","wall", "evening","nail","whale", "eye","napkin","window", "family","needle","wire", "finland","nest","xylophone", "fish","nigeria","yacht", "flag","night","yak", "flower","notebook","zebra", "football","ocean","zoo", "forest","oil","garden", "fountain","orange","gas", "france","oxygen","girl", "furniture","oyster","glass", "garage","ghost" --full list of (a-z) --nounts that start with a
	,"ability" ,"abroad" ,"abuse" ,"access" ,"accident" ,"account" ,"act" ,"action" ,"active" ,"activity" ,"actor" ,"ad" ,"addition" ,"address" ,"administration" ,"adult" ,"advance" ,"advantage" ,"advertising" ,"advice" ,"affair" ,"affect" ,"afternoon" ,"age" ,"agency" ,"agent" ,"agreement" ,"air" ,"airline" ,"airport" ,"alarm" ,"alcohol" ,"alternative" ,"ambition" ,"amount" ,"analysis" ,"analyst" ,"anger" ,"angle" ,"animal" ,"annual" ,"answer" ,"anxiety" ,"anybody" ,"anything" ,"anywhere" ,"apartment" ,"appeal" ,"appearance" ,"apple" ,"application" ,"appointment" ,"area" ,"argument" ,"arm" ,"army" ,"arrival" ,"art" ,"article" ,"aside" ,"ask" ,"aspect" ,"assignment" ,"assist" ,"assistance" ,"assistant" ,"associate" ,"association" ,"assumption" ,"atmosphere" ,"attack" ,"attempt" ,"attention" ,"attitude" ,"audience" ,"author" ,"average" ,"award" ,"awareness","baby" ,"back" ,"background" ,"bad" ,"bag" ,"bake" ,"balance" ,"ball" ,"band" ,"bank" ,"bar" ,"base" ,"baseball" ,"basis" ,"basket" ,"bat" ,"bath" ,"bathroom" ,"battle" ,"beach" ,"bear" ,"beat" ,"beautiful" ,"bed" ,"bedroom" ,"beer" ,"beginning" ,"being" ,"bell" ,"belt" ,"bench" ,"bend" ,"benefit" ,"bet" ,"beyond" ,"bicycle" ,"bid" ,"big" ,"bike" ,"bill" ,"bird" ,"birth" ,"birthday" ,"bit" ,"bite" ,"bitter" ,"black" ,"blame" ,"blank" ,"blind" ,"block" ,"blood" ,"blow" ,"blue" ,"board" ,"boat" ,"body" ,"bone" ,"bonus" ,"book" ,"boot" ,"border" ,"boss" ,"bother" ,"bottle" ,"bottom" ,"bowl" ,"box" ,"boy" ,"boyfriend" ,"brain" ,"branch" ,"brave" ,"bread" ,"break" ,"breakfast" ,"breast" ,"breath" ,"brick" ,"bridge" ,"brief" ,"brilliant" ,"broad" ,"brother" ,"brown" ,"brush" ,"buddy" ,"budget" ,"bug" ,"building" ,"bunch" ,"burn" ,"bus" ,"business" ,"button" ,"buy" ,"buyer","cabinet" ,"cable" ,"cake" ,"calendar" ,"call" ,"calm" ,"camera" ,"camp" ,"campaign" ,"can" ,"cancel" ,"cancer" ,"candidate" ,"candle" ,"candy" ,"cap" ,"capital" ,"car" ,"card" ,"care" ,"career" ,"carpet" ,"carry" ,"case" ,"cash" ,"cat" ,"catch" ,"category" ,"cause" ,"celebration" ,"cell" ,"chain" ,"chair" ,"challenge" ,"champion" ,"championship" ,"chance" ,"change" ,"channel" ,"chapter" ,"character" ,"charge" ,"charity" ,"chart" ,"check" ,"cheek" ,"chemical" ,"chemistry" ,"chest" ,"chicken" ,"child" ,"childhood" ,"chip" ,"chocolate" ,"choice" ,"church" ,"cigarette" ,"city" ,"claim" ,"class" ,"classic" ,"classroom" ,"clerk" ,"click" ,"client" ,"climate" ,"clock" ,"closet" ,"clothes" ,"cloud" ,"club" ,"clue" ,"coach" ,"coast" ,"coat" ,"code" ,"coffee" ,"cold" ,"collar" ,"collection" ,"college" ,"combination" ,"combine" ,"comfort" ,"comfortable" ,"command" ,"comment" ,"commercial" ,"commission" ,"committee" ,"common" ,"communication" ,"community" ,"company" ,"comparison" ,"competition" ,"complaint" ,"complex" ,"computer" ,"concentrate" ,"concept" ,"concern" ,"concert" ,"conclusion" ,"condition" ,"conference" ,"confidence" ,"conflict" ,"confusion" ,"connection" ,"consequence" ,"consideration" ,"consist" ,"constant" ,"construction" ,"contact" ,"contest" ,"context" ,"contract" ,"contribution" ,"control" ,"conversation" ,"convert" ,"cook" ,"cookie" ,"copy" ,"corner" ,"cost" ,"count" ,"counter" ,"country" ,"county" ,"couple" ,"courage" ,"course" ,"court" ,"cousin" ,"cover" ,"cow" ,"crack" ,"craft" ,"crash" ,"crazy" ,"cream" ,"creative" ,"credit" ,"crew" ,"criticism" ,"cross" ,"cry" ,"culture" ,"cup" ,"currency" ,"current" ,"curve" ,"customer" ,"cut" ,"cycle" ,"dad" ,"damage" ,"dance" ,"dare" ,"dark" ,"data" ,"database" ,"date" ,"daughter" ,"day" ,"dead" ,"deal" ,"dealer" ,"dear" ,"death" ,"debate" ,"debt" ,"decision" ,"deep" ,"definition" ,"degree" ,"delay" ,"delivery" ,"demand" ,"department" ,"departure" ,"dependent" ,"deposit" ,"depression" ,"depth" ,"description" ,"design" ,"designer" ,"desire" ,"desk" ,"detail" ,"development" ,"device" ,"devil" ,"diamond" ,"diet" ,"difference" ,"difficulty" ,"dig" ,"dimension" ,"dinner" ,"direction" ,"director" ,"dirt" ,"disaster" ,"discipline" ,"discount" ,"discussion" ,"disease" ,"dish" ,"disk" ,"display" ,"distance" ,"distribution" ,"district" ,"divide" ,"doctor" ,"document" ,"dog" ,"door" ,"dot" ,"double" ,"doubt" ,"draft" ,"drag" ,"drama" ,"draw" ,"drawer" ,"drawing" ,"dream" ,"dress" ,"drink" ,"drive" ,"driver" ,"drop" ,"drunk" ,"due" ,"dump" ,"dust" ,"duty" ,"ear" ,"earth" ,"ease" ,"east" ,"eat" ,"economics" ,"economy" ,"edge" ,"editor" ,"education" ,"effect" ,"effective" ,"efficiency" ,"effort" ,"egg" ,"election" ,"elevator" ,"emergency" ,"emotion" ,"emphasis" ,"employ" ,"employee" ,"employer" ,"employment" ,"end" ,"energy" ,"engine" ,"engineer" ,"engineering" ,"entertainment" ,"enthusiasm" ,"entrance" ,"entry" ,"environment" ,"equal" ,"equipment" ,"equivalent" ,"error" ,"escape" ,"essay" ,"establishment" ,"estate" ,"estimate" ,"evening" ,"event" ,"evidence" ,"exam" ,"examination" ,"example" ,"exchange" ,"excitement" ,"excuse" ,"exercise" ,"exit" ,"experience" ,"expert" ,"explanation" ,"expression" ,"extension" ,"extent" ,"external" ,"extreme" ,"eye" ,"face" ,"fact" ,"factor" ,"fail" ,"failure" ,"fall" ,"familiar"
	,"family" ,"fan" ,"farm" ,"farmer" ,"fat" ,"father" ,"fault" ,"fear" ,"feature" ,"fee" ,"feed" ,"feedback" ,"feel" ,"feeling" ,"female" ,"few" ,"field" ,"fight" ,"figure" ,"file" ,"fill" ,"film" ,"final" ,"finance" ,"finding" ,"finger" ,"finish" ,"fire" ,"fish" ,"fishing" ,"fix" ,"flight" ,"floor" ,"flow" ,"flower" ,"fly" ,"focus" ,"fold" ,"following" ,"food" ,"foot" ,"football" ,"force" ,"forever" ,"form" ,"formal" ,"fortune" ,"foundation" ,"frame" ,"freedom" ,"friend" ,"friendship" ,"front" ,"fruit" ,"fuel" ,"fun" ,"function" ,"funeral" ,"funny" ,"future" ,"gain" ,"game" ,"gap" ,"garage" ,"garbage" ,"garden" ,"gas" ,"gate" ,"gather" ,"gear" ,"gene" ,"general" ,"gift" ,"girl" ,"girlfriend" ,"give" ,"glad" ,"glass" ,"glove" ,"go" ,"goal" ,"god" ,"gold" ,"golf" ,"good" ,"government" ,"grab" ,"grade" ,"grand" ,"grandfather" ,"grandmother" ,"grass" ,"great" ,"green" ,"grocery" ,"ground" ,"group" ,"growth" ,"guarantee" ,"guard" ,"guess" ,"guest" ,"guidance" ,"guide" ,"guitar" ,"guy" ,"habit" ,"hair" ,"half" ,"hall" ,"hand" ,"handle" ,"hang" ,"harm" ,"hat" ,"hate" ,"head" ,"health" ,"hearing" ,"heart" ,"heat" ,"heavy" ,"height" ,"hell" ,"hello" ,"help" ,"hide" ,"high" ,"highlight" ,"highway" ,"hire" ,"historian" ,"history" ,"hit" ,"hold" ,"hole" ,"holiday" ,"home" ,"homework" ,"honey" ,"hook" ,"hope" ,"horror" ,"horse" ,"hospital" ,"host" ,"hotel" ,"hour" ,"house" ,"housing" ,"human" ,"hunt" ,"hurry" ,"hurt" ,"husband" ,"ice" ,"idea" ,"ideal" ,"if" ,"illegal" ,"image" ,"imagination" ,"impact" ,"implement" ,"importance" ,"impress" ,"impression" ,"improvement" ,"incident" ,"income" ,"increase" ,"independence" ,"independent" ,"indication" ,"individual" ,"industry" ,"inevitable" ,"inflation" ,"influence" ,"information" ,"initial" ,"initiative" ,"injury" ,"insect" ,"inside" ,"inspection" ,"inspector" ,"instance" ,"instruction" ,"insurance" ,"intention" ,"interaction" ,"interest" ,"internal" ,"international" ,"internet" ,"interview" ,"introduction" ,"investment" ,"invite" ,"iron" ,"island" ,"issue" ,"it" ,"item" ,"jacket" ,"job" ,"join" ,"joint" ,"joke" ,"judge" ,"judgment" ,"juice" ,"jump" ,"junior" ,"jury" ,"keep" ,"key" ,"kick" ,"kid" ,"kill" ,"kind" ,"king" ,"kiss" ,"kitchen" ,"knee" ,"knife" ,"knowledge" ,"lab" ,"lack" ,"ladder" ,"lady" ,"lake" ,"land" ,"landscape" ,"language" ,"laugh" ,"law" ,"lawyer" ,"lay" ,"layer" ,"lead" ,"leader" ,"leadership" ,"leading" ,"league" ,"leather" ,"leave" ,"lecture" ,"leg" ,"length" ,"lesson" ,"let" ,"letter" ,"level" ,"library" ,"lie" ,"life" ,"lift" ,"light" ,"limit" ,"line" ,"link" ,"lip" ,"list" ,"listen" ,"literature" ,"living" ,"load" ,"loan" ,"local" ,"location" ,"lock" ,"log" ,"long" ,"look" ,"loss" ,"love" ,"low" ,"luck" ,"lunch" ,"machine" ,"magazine" ,"mail" ,"main" ,"maintenance" ,"major" ,"make" ,"male" ,"mall" ,"man" ,"management" ,"manager" ,"manner" ,"manufacturer" ,"many" ,"map" ,"march" ,"mark" ,"market" ,"marketing" ,"marriage" ,"master" ,"match" ,"mate" ,"material" ,"math" ,"matter" ,"maximum" ,"maybe" ,"meal" ,"meaning" ,"measurement" ,"meat" ,"media" ,"medicine" ,"medium" ,"meet" ,"meeting" ,"member" ,"membership" ,"memory" ,"mention" ,"menu" ,"mess" ,"message" ,"metal" ,"method" ,"middle" ,"midnight" ,"might" ,"milk" ,"mind" ,"mine" ,"minimum" ,"minor" ,"minute" ,"mirror" ,"miss" ,"mission" ,"mistake" ,"mix" ,"mixture" ,"mobile" ,"mode" ,"model" ,"mom" ,"moment" ,"money" ,"monitor" ,"month" ,"mood" ,"morning" ,"mortgage" ,"most" ,"mother" ,"motor" ,"mountain" ,"mouse" ,"mouth" ,"move" ,"movie" ,"mud" ,"muscle" ,"music"  ,"nail" ,"name" ,"nasty" ,"nation" ,"national" ,"native" ,"natural" ,"nature" ,"neat" ,"necessary" ,"neck" ,"negative" ,"negotiation" ,"nerve" ,"net" ,"network" ,"news" ,"newspaper" ,"night" ,"nobody" ,"noise" ,"normal" ,"north" ,"nose" ,"note" ,"nothing" ,"notice" ,"novel" ,"number" ,"nurse"  ,"object" ,"objective" ,"obligation" ,"occasion" ,"offer" ,"office" ,"officer" ,"official" ,"oil" ,"one" ,"opening" ,"operation" ,"opinion" ,"opportunity" ,"opposite" ,"option" ,"orange" ,"order" ,"ordinary" ,"organization" ,"original" ,"other" ,"outcome" ,"outside" ,"oven" ,"owner"  ,"pace" ,"pack" ,"package" ,"page" ,"pain" ,"paint" ,"painting" ,"pair" ,"panic" ,"paper" ,"parent" ,"park" ,"parking" ,"part" ,"particular" ,"partner" ,"party" ,"pass" ,"passage" ,"passenger" ,"passion" ,"past" ,"path" ,"patience" ,"patient" ,"pattern" ,"pause" ,"pay" ,"payment" ,"peace" ,"peak" ,"pen" ,"penalty" ,"pension" ,"people" ,"percentage" ,"perception" ,"performance" ,"period" ,"permission" ,"permit" ,"person" ,"personal" ,"personality" ,"perspective" ,"phase" ,"philosophy" ,"phone" ,"photo" ,"phrase" ,"physical" ,"physics" ,"piano" ,"pick" ,"picture" ,"pie" ,"piece" ,"pin" ,"pipe" ,"pitch" ,"pizza" ,"place" ,"plan" ,"plane" ,"plant" ,"plastic" ,"plate" ,"platform" ,"play" ,"player" ,"pleasure" ,"plenty" ,"poem" ,"poet" ,"poetry" ,"point" ,"police" ,"policy" ,"politics" ,"pollution" ,"pool" ,"pop" ,"population" ,"position" ,"positive" ,"possession" ,"possibility" ,"possible" ,"post" ,"pot" ,"potato" ,"potential" ,"pound" ,"power" ,"practice" ,"preference" ,"preparation" ,"presence" ,"present" ,"presentation" ,"president" ,"press" ,"pressure" ,"price" ,"pride" ,"priest" ,"primary" ,"principle" ,"print" ,"prior" ,"priority" ,"private" ,"prize" ,"problem" ,"procedure" ,"process" ,"produce" ,"product" ,"profession" ,"professional" ,"professor" ,"profile" ,"profit" ,"program" ,"progress" ,"project" ,"promise" ,"promotion" ,"prompt" ,"proof" ,"property" ,"proposal" ,"protection" ,"psychology" ,"public" ,"pull" ,"punch" ,"purchase" ,"purple" ,"purpose" ,"push" ,"put"  ,"quality" ,"quantity" ,"quarter" ,"queen" ,"question" ,"quiet" ,"quit" ,"quote" ,"race" ,"radio" ,"rain" ,"raise" ,"range" ,"rate" ,"ratio" ,"raw" ,"reach" ,"reaction" ,"read" ,"reading" ,"reality" ,"reason" ,"reception" ,"recipe" ,"recognition" ,"recommendation" ,"record" ,"recording" ,"recover" ,"red" ,"reference" ,"reflection" ,"refrigerator" ,"refuse" ,"region" ,"register" ,"regret" ,"regular" ,"relation" ,"relationship" ,"relative" ,"release" ,"relief" ,"remote" ,"remove" ,"rent" ,"repair" ,"repeat" ,"replacement" ,"reply" ,"report" ,"representative" ,"republic" ,"reputation" ,"request" ,"requirement" ,"research" ,"reserve" ,"resident" ,"resist" ,"resolution" ,"resolve" ,"resort" ,"resource" ,"respect" ,"respond" ,"response" ,"responsibility" ,"rest" ,"restaurant" ,"result" ,"return" ,"reveal" ,"revenue" ,"review" ,"revolution" ,"reward" ,"rice" ,"rich" ,"ride" ,"ring" ,"rip" ,"rise" ,"risk" ,"river" ,"road" ,"rock" ,"role" ,"roll" ,"roof" ,"room" ,"rope" ,"rough" ,"round" ,"routine" ,"row" ,"royal" ,"rub" ,"ruin" ,"rule" ,"run" ,"rush" ,"sad" ,"safe" ,"safety" ,"sail" ,"salad" ,"salary" ,"sale" ,"salt" ,"sample" ,"sand" ,"sandwich" ,"satisfaction" ,"save" ,"savings" ,"scale" ,"scene" ,"schedule" ,"scheme" ,"school" ,"science" ,"score" ,"scratch" ,"screen" ,"screw" ,"script" ,"sea" ,"search" ,"season" ,"seat" ,"second" ,"secret" ,"secretary" ,"section" ,"sector" ,"security" ,"selection" ,"self" ,"sell" ,"senior" ,"sense" ,"sensitive" ,"sentence" ,"series" ,"serve" ,"service" ,"session" ,"set" ,"setting" ,"sex" ,"shake" ,"shame" ,"shape" ,"share" ,"she" ,"shelter" ,"shift" ,"shine" ,"ship" ,"shirt" ,"shock" ,"shoe" ,"shoot" ,"shop" ,"shopping" ,"shot" ,"shoulder" ,"show" ,"shower" ,"sick" ,"side" ,"sign" ,"signal" ,"signature" ,"significance" ,"silly" ,"silver" ,"simple" ,"sing" ,"singer" ,"single" ,"sink" ,"sir" ,"sister" ,"site" ,"situation" ,"size" ,"skill" ,"skin" ,"skirt" ,"sky" ,"sleep" ,"slice" ,"slide" ,"slip" ,"smell" ,"smile" ,"smoke" ,"snow" ,"society" ,"sock" ,"soft" ,"software" ,"soil" ,"solid" ,"solution" ,"somewhere" ,"son" ,"song" ,"sort" ,"sound" ,"soup" ,"source" ,"south" ,"space" ,"spare" ,"speaker" ,"special" ,"specialist" ,"specific" ,"speech" ,"speed" ,"spell" ,"spend" ,"spirit" ,"spiritual" ,"spite" ,"split" ,"sport" ,"spot" ,"spray" ,"spread" ,"spring" ,"square" ,"stable" ,"staff" ,"stage" ,"stand" ,"standard" ,"star" ,"start" ,"state" ,"statement" ,"station" ,"status" ,"stay" ,"steak" ,"steal" ,"step" ,"stick" ,"still" ,"stock" ,"stomach" ,"stop" ,"storage" ,"store" ,"storm" ,"story" ,"strain" ,"stranger" ,"strategy" ,"street" ,"strength" ,"stress" ,"stretch" ,"strike" ,"string" ,"strip" ,"stroke" ,"structure" ,"struggle" ,"student" ,"studio" ,"study" ,"stuff" ,"stupid" ,"style" ,"subject" ,"substance" ,"success" ,"suck" ,"sugar" ,"suggestion" ,"suit" ,"summer" ,"sun" ,"supermarket" ,"support" ,"surgery" ,"surprise" ,"surround" ,"survey" ,"suspect" ,"sweet" ,"swim" ,"swimming" ,"swing" ,"switch" ,"sympathy" ,"system" ----nounts t"
	,"table" ,"tackle" ,"tale" ,"talk" ,"tank" ,"tap" ,"target" ,"task" ,"taste" ,"tax" ,"tea" ,"teach" ,"teacher" ,"teaching" ,"team" ,"tear" ,"technology" ,"telephone" ,"television" ,"tell" ,"temperature" ,"temporary" ,"tennis" ,"tension" ,"term" ,"test" ,"text" ,"thanks" ,"theme" ,"theory" ,"thing" ,"thought" ,"throat" ,"ticket" ,"tie" ,"till" ,"time" ,"tip" ,"title" ,"today" ,"toe" ,"tomorrow" ,"tone" ,"tongue" ,"tonight" ,"tool" ,"tooth" ,"top" ,"topic" ,"total" ,"touch" ,"tough" ,"tour" ,"tourist" ,"towel" ,"tower" ,"town" ,"track" ,"trade" ,"tradition" ,"traffic" ,"train" ,"trainer" ,"training" ,"transition" ,"transportation" ,"trash" ,"travel" ,"treat" ,"tree" ,"trick" ,"trip"
	,"trouble" ,"truck" ,"trust" ,"truth" ,"try" ,"tune" ,"turn" ,"twist" ,"two" ,"type" ,"uncle" ,"understanding" ,"union" ,"unique" ,"unit" ,"university" ,"upper" ,"upstairs" ,"use" ,"user" ,"usual" ,"vacation" ,"valuable" ,"value" ,"variation" ,"variety" ,"vast" ,"vegetable" ,"vehicle" ,"version" ,"video" ,"view" ,"village" ,"virus" ,"visit" ,"visual" ,"voice" ,"volume" ,"wait" ,"wake" ,"walk" ,"wall" ,"war" ,"warning" ,"wash" ,"watch" ,"water" ,"wave" ,"way" ,"weakness" ,"wealth" ,"wear" ,"weather" ,"web" ,"wedding" ,"week" ,"weekend" ,"weight" ,"weird" ,"welcome" ,"west" ,"western" ,"wheel" ,"whereas" ,"while" ,"white" ,"whole" ,"wife" ,"will" ,"win" ,"wind" ,"window" ,"wine" ,"wing" ,"winner" ,"winter" ,"wish" ,"witness" ,"woman" ,"wonder" ,"wood" ,"word" ,"work" ,"worker" ,"working" ,"world" ,"worry" ,"worth" ,"wrap" ,"writer" ,"writing" ,
	--"here are some the letter y:" ,""
	"yak" ,"yam" ,"yard" ,"yarn" ,"yawn" ,"year" ,"yeast" ,"yellow" ,"yield" ,"yoga" ,"yolk" ,"youth" ,"yoyo" ,"yacht" ,"yin" ,"yang" ,"yodel" ,"yelp" ,"yen" ,"yesterday" --,"here z:"
	,"zebra" ,"zenith" ,"zigzag" ,"zinc" ,"zipper" ,"zircon" ,"zodiac" ,"zombie" 
	,"zone" ,"zoo" ,"zoom" ,"zucchini"}]]
local LearningLibrary=BotResource.ChatModule.WikiQueries
local InsructLibrary=BotResource.ChatModule.Instruct
local PhilosophyLibrary=BotResource.ChatModule.Queries
local favcol={"red","green","blue","yellow","orange","purple"}
local AddConstruct = {"+",
	". Then, I add ", 
	". Furthermore, I gain ", 
	". In addition to that I have ", 
	". We obtain ", 
	". Then we acquire ",
	". After that, I receive ",
	". Besides that, I find ",
	". We also get  ",
	". Then we collect "
}
local SubtractConstruct = {"-",
	". I lose ", 
	". Taking away ", 
	". Say we no longer have ", 
	". So some of them have disappeared that is ",
	". I give away ",
	". Removing ",
	". Suppose we use up ",
	". So a few of them are gone that is ",
	". I donate "
}
local MultiplyConstruct = {"*",
	". multiply ", 
	". duplicate them ", 
	". get them times ", 
	". give each group ", 
	". After that, I replicate them all by ",
	". Besides that, I boost them all by ",
	". We multiply them by ","*"
}
local DivideConstruct = {"/",
	". Then, I divide them by ", 
	". Furthermore, I split them amongst ", 
	". In addition to that I share them among ", 
	". We separate them into groups of ", 
	". Then we distribute amongst ",
	". After that, I seperate them into groups of ",
	". Besides that, I divide them equally among ",
	". We split them into groups of ",
	". Then we allocate by "
}
local Opening = {
	"If I have a ", 
	"If I possess a ", 
	"So we have a ", 
	"So starting with a ",
	"Imagine I have a ",
	"Suppose I own a ",
	"Let's say we have a ",
	"Given that I start with a "
}

-- Define the phrases for each shape
local SquareConstruct = {
	"square with side length of ", 
	"square with edge width of ", 
	"square with each side measuring ", 
}

local RectangleConstruct = {
	"rectangle with length of ", 
	"and a width of ", 
}
local CircleConstruct = {
	"circle with radius of ", 
	"circle with diameter of ", 
}
local TriangleConstruct = {
	"triangle with base of ", 
	"and a height of ", 
}
local SquareQuestion = {
	"What is the area of the square?",
	"What is the perimeter of the square?",
}
local RectangleQuestion = {
	"What is the area of the rectangle?",
	"What is the perimeter of the rectangle?",
}
local CircleQuestion = {
	"What is the area of the circle?",
	"What is the circumference of the circle?",
}
local TriangleQuestion = {
	"What is the area of the triangle?",
	"What is the perimeter of the triangle?",
}

function chatmodule.mathrandom(min,max)

	if min==nil then
		----print("Min Integer is nil converted to 0")
		min=0

	end
	if max==nil then
	--	--print("Max Integer is nil converted to 1")
		max=1
	end
	return 	globalrng:NextInteger(min, max)
end

 Epic={"However,","black holes","space","wisdom","victory","destiny","magic","quest", "glory", "hero", "adventure", "legend", "epic","brave","authority","warriors","courage", "honor", "fate", "challenge", "myth", "power","intriguing",
	"legendary", "saga", "heroic", "majestic", "grand", "fierce", "awe-inspiring", "dramatic", "impressive",
	"fantastic", "marvelous", "splendid", "astonishing", "extraordinary", "remarkable", "stunning", "thrilling"}
 Happy={"grateful","holy","happy","great","bright","passionate","light",
	"conversations","viture","inspire","learn", "joyful", "cheerful", "delighted", "ecstatic", "grateful", "amused", "blissful", "contented", "gleeful", "jubilant",
	"sunny", "optimistic", "enthusiastic", "lively", "smiling", "radiant", "satisfied", "thrilled", "exuberant",
	"merry", "pleasant", "enjoyable", "funny", 	"charming",
	"lovely",
	"wonderful",
	"delightful",
	"pleasing"}
 Polite={"friend","honored","grace","patience","love","empathy",
	"respect","courtesy","kindness","gentleness","consideration","acquaintance",
	"pleased","nobility","civility","compliment","generosity","gratitude",
	"humility","cordial","amicable","affable","courteous","civilized",
	"tactful","diplomatic","charming","polished","mind","heart",
	"sincere","honest","fair","cooperative","helpful","warm",
	"sociable","friendly"}
 Mystery={"grunts","mysterious","clouds","questions","mystery","thoughts",
	"dreaming","lack","explore","secrets","wish","reality","combat",
	"puzzle","intrigue","curiosity","suspense","clue","mask","hidden",		"survivial","riddle","enigma","uncertainty","mysticism","paradox","cryptic","mystifying","puzzling",	"enigmatic","perplexing","wildering","uncanny","eerie","spooky",			"insight","shadow","occult","hidden","unknown","mystery","confusing","bewildering","strange"}
 Question={"question","knowledge","inquiry","ask","why", 
	"wonder", "doubt", 	"learn"	, "discover", "understand","matters","answer","focus",
	"inform","well-versed","opinion","what","how","when", 
	"where", "who","which",	"query"	,	"inquire",	"probe","investigate",
	"examine","clarify"	,"elaborate"
	,"specify","inform","reason","explain","justify","evaluate","compare","contrast"}
 Sad={"trembles","life","pain","sad","defeat", "grief", "sorrow", "melancholy", "depressed", "lonely","cowardice","weakness","dreary","rainy","broken",
	"mournful", "gloomy", "dismal", "heartbroken", "despairing", "miserable", "tearful", "woeful", "downcast", "regretful",
	"unhappy", "dejected", "hopeless", "distressed", "anguished", "suffering", "wretched", "forlorn", "lamentable"}
 Scary={"trembles","surviving","dangerous","pain","grunts","enemies"
	,"creature","beast","consume","beast","snarl", "fear", "horror", "terror", "panic", "threat","rabrid","axe","bloodstained","primal","carnage","victims","violence","consuming","attack"
	,"corruption","carefully","dark","horror","doom","caution",
	"nightmare", "haunted", "chilling", "creepy", "dreadful", "menacing", "gruesome", "gory", "shocking","spooky","sinister","evil","monstrous","terrifying","hideous","macabre","horrendous","ghosts"}
 Angry={"mad","rage","anger","angry","darkness","madness",
	"despise","furious","resentful","bitter","irritated","frustrated",
	"drives","fury","spit","mortal","wrath","hostile",
	"aggressive","vindictive","outraged","annoyed","offended","indignant",
	"seething","upset","displeased","betray","fight"}
local  Bestiary = {"Darkness Slime", "Darkness Juggernaut", "Dark Eye", "Dark Wyvern", "Dark Horse", "Dark Calvary", "Dark Witch", "Mutant Beast", "Dark Gryphon", "Pixie of Darkness", "Darkness Blob", "Dark Valkyria", "Dark Summoner", "Dark Wizard", "Dark Berserker", "Phantom", "Shadow Husk", "Yuki Angel of Darkness", "Corrupted Banshee", "Putrid Wretch", "Humonculus", "Darkness Wraith", "Dark Armored Griffin", "Parasite", "Rat", "Poltergeist", "Armored Lion", "Corrupted Boar", "Ringing Maiden", "Dark Abomination", "Dark Angel of Twilight", "Invader from Another Dimension", "Ember Dragon", "Ghost Hare of the Winter Snow", "Witch Goddess Lilith", "Reactor Dragon", "Ghost Rabbit", "Electric Spider Fiend", "Dark Goddess Rebecca", "Wailing Specter", "Dark Controller", "Dark Fire Wyvern", "Starfish from the Dark Dimension", "Wolf Warrior", "Sky Dragon", "Angel of Darkness"}


local questionKeywords = {"what", "which", "where", "when","how"}
local qKeywordPairs = {"is", "are", "was", "were", "can", "could", "does", 
	"should", "will", "would", "has", "had", "did", "does",  
	"means", "meant", "causes", "caused", "makes", "made"}
local remote=BotResource.APICallsLearnData.APIData.RemoteEvent
local complete=false

local Reflection={
	{"why","because"},
	{"who","name"},
	{"are you","I am"},
	{"my", "your"},
	{"me", "you"},
	{"can", "could"},
	{"we", "you"},
	{"us", "you"},
	{"ours", "yours"},
	{"our", "your"},
	{"were", "was"}, 
	{"will", "would"},
	{"was", "am"},
	{"were", "are"},
	{"had", "have"},
	{"I", "you"},
	{"my", "your"},
	{"mine", "yours"},
	{"am", "are"},
	{"was", "were"},
	{"have", "has"},
	{"had", "has"},
	{"it", "that"},
	{"this", "that"},
	{"these", "those"},
	{"what", "that"},
	{"when", "then"},
	{"where", "there"}
}
local Emotions={["Angry"]=Angry,
	["Epic"]=Epic,
	["Happy"]=Happy,
	["Polite"]=Polite,
	["Scary"]=Scary,
	["Sad"]=Sad,
	["Question"]=Question,
	["Mystery"]=Mystery,
}
local blacklistwords={"i'm","looking","were" ,"we're" ,"we?" ,"do" ,
	"more" ,"about" ,"tell" ,"me" ,"what" ,"is" ,"a" ,"the" ,"of" ,"i" ,"how" ,"we" ,"us" ,"their" ,"them" ,"you" ,"dark" ,"if" ,"there" ,"have" ,"many" ,"one" ,"important" ,"situation" ,"but" ,"can" ,"think" ,"wondering" ,"im" ,"and" ,"an" ,"question","are" ,"thinking" ,"your" ,"hear" ,"else" ,"have" ,"things" ,"few" ,"or" ,"any" , "be" , "use", "made" , "may" , "give" 
	, "help" , "came" , "show"
	, "does" , "must" , "went" 
	, "need" , "try"  , "found"
	, "should" , "add" , "keep"
	, "start" , "saw" , "turn" 
	, "might" , "close" , "seem" 
	, "open" , "begin" , "got" 
	, "began" , "grow" , "took" ,
	"carry" , "hear" , "stop" , "miss" ,"are","?",".",
	"where","hello","hey","hi","1","2","3","4","5","6","7","8","9","0"}

local lightlistwords={"i'm","were" ,"we're" ,"we?" ,"do" ,"more" ,"about" ,"me" 
	,"what" ,"is" ,"a" ,"the" ,"of" ,"i" ,"we" ,"us" ,"their" ,"them" ,"you"  ,"if" ,"there" ,"have" ,"one" ,"situation" ,"but" ,"can" ,"think" ,"im" ,"and" ,"an" ,"are" ,"your" ,"hear" ,"else" ,"have" ,"few" ,"or" ,"any" , "be" , "use", "made" , "may" 
	,  "came" , "need" , "try"  , "found", "should" , "add" , "keep"
	, "start" ,  "turn" , "might" , "close" , "seem" , "open","are"}


function chatmodule.CountWords(query)

	-- Split the query into words
	local words = {}
	for word in string.gmatch(query, "%S+") do
		table.insert(words, word)
	end

	-- Return number of words
	return #words

end



-- Return the tables
function score_string(str)
  -- Convert the string to lower case and split it into words
  str = str:lower()
  local words = {}
  for word in str:gmatch("%w+") do
    table.insert(words, word)
  end

  -- Initialize a table of scores for each emotion
  local scores = {}
  for _, emotion in ipairs({"Epic", "Happy", "Polite", "Mystery", "Question", "Sad", "Scary", "Angry"}) do
    scores[emotion] = 0
  end

  -- Loop through each word and increment the score for the matching emotion
  for _, word in ipairs(words) do
    for _, emotion in ipairs({"Epic", "Happy", "Polite", "Mystery", "Question", "Sad", "Scary", "Angry"}) do
      local guide_words = _G[emotion] -- Get the global table of guide words for the emotion
      for _, guide_word in ipairs(guide_words) do
        if word == guide_word:lower() then -- If the word matches the guide word, increment the score
          scores[emotion] = scores[emotion] + 1
          break -- Break out of the inner loop to avoid double counting
        end
      end
    end
  end

  -- Return the table of scores
  return scores
end

function checkemot(id)
	if id=="Epic" then
		return Epic
	elseif id=="Happy" then
		return Happy
	elseif id=="Polite" then
		return Polite
	elseif id=="Mystery" then
		return Mystery
	elseif id=="Question" then
		return Question
	elseif id=="Sad" then
		return Sad
	elseif id=="Scary" then
		return Scary
	elseif id=="Angry" then
		return Angry
	end
end
--string.gmatch(query, "%S+")
-- Define a function that takes a string and returns a table of scores for each emotion

function chatmodule.score_string(str)
	-- Convert the string to lower case and split it into words
	

	-- Initialize a table of scores for each emotion
	local scores = {}
	for _, emotion in ipairs({"Epic", "Happy", "Polite", "Mystery", "Question", "Sad", "Scary", "Angry"}) do
		scores[emotion] = 0
	end
	str = str:lower()
	local words = {}
	for word in str:gmatch("%w+") do
		table.insert(words, word)
	end
	-- Loop through each word and increment the score for the matching emotion
	for _, word in ipairs(words) do
		for _, emotion in ipairs({"Epic", "Happy", "Polite", "Mystery", "Question", "Sad", "Scary", "Angry"}) do
			local guide_words =checkemot(emotion) -- Get the global table of guide words for the emotion
			for _, guide_word in ipairs(guide_words) do -- invalid argument #1 to 'ipairs' (table expected, got nil) 
				if word== guide_word:lower() or word== (guide_word..","):lower() or word== (guide_word.."."):lower() or word == (guide_word.."!"):lower() or word== (guide_word.."?"):lower() then -- 
					scores[emotion] = scores[emotion] + 1
					break -- Break out of the inner loop to avoid double counting
				end
			end
		end
	end
	local emotion,score=chatmodule.get_emotion(scores)
	-- Return the table of scores
	return score,emotion
end
function chatmodule.getemotion(str)
	local emotionscores,emotion=chatmodule.score_string(str)
	return emotion,emotionscores
end	

function chatmodule.writeemotion(npcdir,emotion,score)
	npcdir:SetAttribute(emotion,score)
	
end	
-- Define a global variable to store the total emotional score
local total_scores = {Epic = 0, Happy = 0, Polite = 0, Mystery = 0, Question = 0, Sad = 0, Scary = 0, Angry = 0}

-- Define a function that takes a string and adds its scores to the global variable
function chatmodule.add_string_scores(str)
	-- Get the table of scores from the score_string function
	local scores = chatmodule.score_string(str)

	-- Loop through each emotion and add the corresponding score to the global variable
	for emotion, score in pairs(scores) do
		total_scores[emotion] = total_scores[emotion] + score
	end

	-- Return the global variable
	return total_scores
end

-- Define a function that takes a table of scores and returns the name of the emotion with the highest score
function chatmodule.get_emotion(scores)
	-- Initialize a variable to store the highest score and the corresponding emotion
	local max_score = 0
	local max_emotion = nil

	-- Loop through each emotion and score in the table
	for emotion, score in pairs(scores) do
		-- If the score is higher than the current maximum, update the variables
		if score > max_score then
			max_score = score
			max_emotion = emotion
		end
	end

	-- Return the name of the emotion with the highest score
	return max_emotion,max_score
end

-- Define a function that uses the get_emotion function to get the mood of the bot based on the total scores
function chatmodule.get_mood()
	-- Get the emotion with the highest score from the total scores
	local mood = chatmodule.get_emotion(total_scores)

	-- Return the mood
	return mood
end

---- Test the functions with some examples
--add_string_scores("I am happy to be your friend") -- Add some scores to the global variable based on a string input 
----print(get_mood()) -- Print the mood of the bot based on the total scores 
--add_string_scores("The black hole consumed the star") -- Add some more scores to the global variable based on another string input 
----print(get_mood()) -- Print the mood of the bot again based on the updated total scores 

function chatmodule.QuestRewardStringtable(QReward2,Player,QID2,QQuantity2,Namtag,Player)
	local questphrasetables={{"Well done hero! Your help will be the talk of the town I cannot thank you enough. Please accept this "..QReward2.Value.." as a reward.",
	"I cannot thank you enough "..Player.Name.." truly your efforts are appreciated.",
	"Hey! You've returned with the "..QID2.Value.."!",
	"You did it "..Player.Name.."! You've found the "..QQuantity2.Value.." "..QID2.Value.." I needed!",
	"Thank you so much "..Player.Name..". Here's a "..QReward2.Value.." as your reward.",
	"You are a true hero "..Player.Name..", please accept this reward of a "..QReward2.Value.." as a token of my gratitude.",
	"My hero! I appreciate your help. Please accept this reward.",
	"I can't repay you enough, here's your reward adventurer. Fair travels!",
	"They will tell stories of your exploits adventurer!",
	"Thank you hero! Please accept this "..QReward2.Value.." as a reward.",
	"Amazing job, hero! You have done a great service to this town. Please take this "..QReward2.Value.." as a reward.",
	"You have my deepest gratitude "..Player.Name.." for your help.",
	"Hey! You've brought back the "..QID2.Value.."!",
	"You've succeeded "..Player.Name.."! You've collected the "..QQuantity2.Value.." "..QID2.Value.." I requested!",
	"Thank you very much "..Player.Name..". Here's a "..QReward2.Value.." as your reward.",
	"You are a true legend "..Player.Name..", please accept this reward of a "..QReward2.Value.." as a sign of my appreciation.",
	"My savior! I appreciate your help. Please accept this reward.",
	"I owe you a lot, here's your reward adventurer. Safe travels!",
	"They will sing songs of your deeds adventurer!",
	"Thank you hero! Please accept this "..QReward2.Value.." as a reward.",
	"Excellent work, hero! You have done a remarkable deed for this town. Please accept this "..QReward2.Value.." as a reward.",
	"You have my eternal gratitude "..Player.Name.." for your help.",
	"Hey! You've delivered the "..QID2.Value.."!",
	"You've accomplished "..Player.Name.."! You've gathered the "..QQuantity2.Value.." "..QID2.Value.." I asked for!",
	"Thank you kindly "..Player.Name..". Here's a "..QReward2.Value.." as your reward.",
	"You are a true champion "..Player.Name..", please accept this reward of a "..QReward2.Value.." as a gesture of my thanks.",
	"My benefactor! I appreciate your help. Please accept this reward.",
	"I am in your debt, here's your reward adventurer. Happy travels!",
	"They will write books of your adventures adventurer!",
	"Thank you hero! Please accept this "..QReward2.Value.." as a reward.",
	"Bravo, hero! Your help will be remembered by everyone I cannot thank you enough. Please accept this "..QReward2.Value.." as a reward.",
	"I am so grateful to you "..Player.Name.." truly your efforts are admirable.",
	"Hey! You've come back with the "..QID2.Value.."!",
	"You did it "..Player.Name.."! You've located the "..QQuantity2.Value.." "..QID2.Value.." I required!",
	"Thank you immensely "..Player.Name..". Here's a "..QReward2.Value.." as your reward.",
	"You are a true hero "..Player.Name..", please accept this reward of a "..QReward2.Value.." as a mark of my respect.",
	"My hero! I appreciate your help. Please accept this reward.",
	"I can't thank you enough, here's your reward adventurer. Good travels!",
	"They will share tales of your exploits adventurer!",
	"Thank you hero! Please accept this "..QReward2.Value.." as a reward.",
	"Splendid job, hero! You have done a wonderful service to this town. Please take this "..QReward2.Value.." as a reward.",
	"You have my sincere gratitude "..Player.Name.." for your help.",
	"Hey! You've returned the "..QID2.Value.."!",
	"You've achieved "..Player.Name.."! You've obtained the "..QQuantity2.Value.." "..QID2.Value.." I needed!",
	"Thank you dearly "..Player.Name..". Here's a "..QReward2.Value.." as your reward.",
	"You are a true star "..Player.Name..", please accept this reward of a "..QReward2.Value.." as a token of my admiration.",
	"My rescuer! I appreciate your help. Please accept this reward.",
	"I am indebted to you, here's your reward adventurer. Safe journeys!",
	"They will chant praises of your deeds adventurer!",
	"Thank you hero! Please accept this "..QReward2.Value.." as a reward.",
	"Fantastic work, hero! You have done an amazing deed for this town. Please accept this "..QReward2.Value.." as a reward.",
	"You have my heartfelt gratitude "..Player.Name.." for your help.",
	"Hey! You've brought the "..QID2.Value.."!",
	"You've done it "..Player.Name.."! You've gathered the "..QQuantity2.Value.." "..QID2.Value.." I asked for!",
	"Thank you warmly "..Player.Name..". Here's a "..QReward2.Value.." as your reward.",
	"You are a true leader "..Player.Name..", please accept this reward of a "..QReward2.Value.." as a sign of my esteem.",
	"My helper! I appreciate your help. Please accept this reward.",
	"I am grateful to you, here's your reward adventurer. Happy trails!",
	"They will record stories of your adventures adventurer!",
		"Thank you hero! Please accept this "..QReward2.Value.." as a reward."},
	{"Hey there, I'm just your friendly "..Nametag.Text..", Happy Halloween!","You finally found me! Here's a treat!","Don't worry I know the rules. But no tricks today just treats!","What a beautiful Hallows Eve! Nice costume!",
		"You're a very well dressed Trick or Treater.","I hope you enjoy this treat "..Player.Name..".",
		"Wow your costume is great "..Player.Name.."!"," Happy Hallows Eve "..Player.Name..", when Ghosts roam the land!","Boo! Did I scare you? No? Well, here's some candy anyway.","You're brave enough to face me, the spooky "..Nametag.Text.."!","Greetings, mortal. I am the legendary "..Nametag.Text..". Fear me not, for I have candy.","You have found the hidden "..Nametag.Text..". Well done!",
		"You're not afraid of ghosts, are you? Good, because I'm one of them.","Hello there, I'm the friendly "..Nametag.Text..". Want some candy?","You have a great sense of humor. You made me laugh with your costume.","You have completed the quest of finding the elusive "..Nametag.Text.."."
	},{" That means you get this "..QReward2.Value.."! Trick or Treat!",
		" Here's a "..QReward2.Value.." as your treat!",
		" Here's a "..QReward2.Value.." for you.",
		" Here's your reward! It's a "..QReward2.Value..".",
		" Here's a "..QReward2.Value.." for Halloween!",
		" Please no tricks tonight just take this "..QReward2.Value..".",
		" I may not be so generous next time! But I'm feeling festive!"
		," As a reward, I'll give you this "..QReward2.Value..".",
		" You deserve this "..QReward2.Value..".",
		" You earned this "..QReward2.Value..".",
		" This is for you. It's a "..QReward2.Value..".",
		" You can have this "..QReward2.Value..".",
		" This is my gift to you. A "..QReward2.Value..".",
		" Take this "..QReward2.Value.."."	
	},
	{"Well rats, you found me!","Uh oh you caught me!","Don't worry I know the rules.","Congratulations you found me!",
		"You're quite the keen adventurer for finding me.","Well played "..Player.Name..".",
		"You're quite the explorer"..Player.Name..".","Very impressive "..Player.Name.."!",
		"Wow, you're really good at this game.","You got me fair and square.","I guess I'm not very good at hiding.","You're faster than I thought.",
		"You have a keen eye for details.","Nice job, "..Player.Name..".","You're a natural at this game.","You must have played this before."},
	{" That means you get this "..QReward2.Value.."! Here you go!",
		" Here's a "..QReward2.Value.." as a reward!",
		" Here's a "..QReward2.Value.." for you.",
		" Here's your reward! It's a "..QReward2.Value..".",
		" Here's a "..QReward2.Value.." for your troubles.",
		" Please accept this "..QReward2.Value.." as a reward.",
		" I won't let you catch me so easy next time. Here take this "..QReward2.Value..".",
		" As a reward, I'll give you this "..QReward2.Value..".",
		" You deserve this "..QReward2.Value.." for your skills.",
		" You earned this "..QReward2.Value..".",
		" This is for you. It's a "..QReward2.Value..".",
		" You can have this "..QReward2.Value..".",
		" This is my gift to you. A "..QReward2.Value..".",
		" Take this "..QReward2.Value.."."
	},{"I'm glad to see you "..Player.Name..".","Greetings traveler! Beautiful day isn't it?","Good day to you hero.","Hey there! Nice to see you.","Hi, I'm glad to see you.","Greetings to you "..Player.Name..".","It's always a pleasure to see you "..Player.Name..".",
		"What an enchanting day! Always glad to have company.","Hello there, how can I help you?","Greetings adventurer, welcome!","Hey there friend! Beautiful day isn't it?",
		"Why hello there adventurer. Fine day today isn't it?","Hey "..Player.Name..", you're looking lively as ever!","Do my eyes decieve if it isn't "..Player.Name.." in the flesh!... More or less.",
		"Welcome traveler! I am enchanted to meet you.","We don't see to many like you around here.","Hope your travels are going well!","Hmm... if only I could get the thing about the "..QID2.Value.." solved...",
		"Hello "..Player.Name..", what brings you here?","Greetings traveler! You look like you've seen some adventures.","Good day to you hero. You have a reputation for being brave.","Hey there! You seem friendly enough.","Hi, I'm always happy to meet new people.","Greetings to you "..Player.Name..". You have a curious aura about you.","It's a pleasure to see you "..Player.Name..". You have a knack for finding interesting places.","What a wonderful day! I'm glad you're here to share it with me.","Hello there, do you need anything?","Greetings adventurer, you're in luck! I have something for you.","Hey there pal! You look like you could use some company.",
		"Hello there adventurer. You have a sparkle in your eye.","Hey "..Player.Name..", you're quite the sight for sore eyes!","Well, well, well, if it isn't "..Player.Name.."! I've heard stories about you.",
		"Welcome traveler! I am delighted to see you.","We don't get many visitors like you around here.","Hope your journey is going smoothly!"	
	}
	}
	
end

function chatmodule.GetQuestInterChangephrases(interchangephrases)
	local interchangestrings={{"You're very powerful hero of light... But if I was at full power you wouldn't stand a chance!",
		"Truly a worthy opponent... Heed me warrior, show me mercy and I will reward you.",
		"Wait! Wouldn't you like a real battle hero of light?! Surely you desire valor and glory. Share your power with me.",
		"Surely you would like a chance at a great reward? Share your power with me and if you defeat me you will be rewarded greatly.",
		"Greed... The folly of men. Now hero, here's your chance, spare me some of your power, defeat me and be rewarded handsomely.",
		"Wait! We darkness are magical creatures, spare me the energy you harnessed from my fallen allies, and if you defeat me the magic will incarnate into a powerful item."
		,"You're a formidable hero of light... But you have not seen my true strength yet!",
		"Such a noble opponent... Listen to me warrior, spare me your wrath and I will grant you a boon.",
		"Stop! Don't you want a real challenge hero of light?! Surely you crave honor and fame. Lend me your power and let us clash.",
		"Don't you want a chance at a magnificent prize? Lend me your power and if you best me you will be rewarded richly.",
		"Pride... The downfall of men. Now hero, here's your opportunity, give me some of your power, overcome me and be rewarded lavishly.",
		"Hold on! We darkness are mystical beings, give me the energy you collected from my comrades, and if you vanquish me the magic will transform into a potent item."
		,"You're an impressive hero of light... But you have not faced my full fury yet!",
		"A respectable adversary... Hear me out warrior, show me some compassion and I will offer you a favor.",
		"Wait a minute! Don't you want a real test hero of light?! Surely you seek glory and renown. Share your power with me and let us fight.",
		"Don't you want a chance at a splendid reward? Share your power with me and if you defeat me you will be rewarded generously.",
		"Wait up! We darkness are magical creatures, donate the energy you gathered from my allies, and if you subdue me the magic will materialize into a powerful item."
		,"You’re a mighty warrior of light.. But you have not faced the true horror of the darkness yet!",
		"Spare my life and I will reveal to you a secret of the darkness that no one else knows.", 
		"Don’t you want to know more about the darkness and its origin? Share with me some of your light and I will tell you a tale that will chill your bones.",
		"Fear.. The weapon of the darkness. Now warrior, here is your choice. Give me some of your light and I will reward you with a glimpse of the darkness’s power.",
		"Wait! We darkness are not evil, we are misunderstood. Spare me some of your light and I will show you the beauty and wisdom of the darkness.", 
		"You’re a valiant warrior of light.. But you have not witnessed the true might of the cloud yet!",
		"Spare my existence and I will share with you a mystery of the cloud that no one else can solve.", 
		"Don’t you want to learn more about the cloud and its purpose? Lend me some of your light and I will teach you a lesson that will enlighten your mind.", 
		"Curiosity.. The trap of the cloud. Now warrior, here is your chance. Lend me some of your light and I will reward you with a glimpse of the cloud’s secrets.",
		"Hold on! We darkness are not enemies, we are allies. Lend me some of your light and I will show you the strength and courage of the cloud.",
		"You’re a noble warrior of light.. But you have not experienced the true terror of the dark source yet!", 
		"Spare my being and I will tell you a truth of the dark source that no one else can handle.",
		"Don’t you want to discover more about the dark source and its nature? Give me some of your light and I will show you a sight that will astound your eyes.",
		"Wonder.. The lure of the dark source. Now warrior, here is your opportunity. Give me some of your light and I will reward you with a glimpse of the dark source’s wonders.", 
		"Stop! We darkness are not monsters, we are creatures. Give me some of your light and I will show you the grace and harmony of the dark source.", 
		"You’re a fearless warrior of light.. But you have not felt the true rage of the rain of darkness yet!", 
		"Spare my soul and I will offer you a bargain of the rain of darkness that no one else can refuse.", 
		"Don’t you want to explore more about the rain of darkness and its effects? Share with me some of your light and I will show you a miracle that will amaze your senses.", 
		"Faith.. The test of the rain of darkness. Now warrior, here is your moment. Share with me some of your light and I will reward you with a glimpse of the rain of darkness’s miracles.", 
		"Wait! We darkness are not fiends, we are friends. Share with me some of your light and I will show you the love and peace of the rain of darkness."
		,"You’re a dauntless warrior of light.. But the dark lands has more nightmares than you can dream!",
		"Grant me clemency and I will bestow upon you a portal to the dark realm that only you can traverse."
		, "The dark cloud entices you, warrior. Do you possess the mettle to behold its horrors? Part with some of your light and I will unveil to you a vision that will freeze your blood."	
		, "Dread.. The tool of the darkness. Now warrior, here is your doom. Part your light with me and I will reward you with a glimpse of the dark abyss’s nightmares."		
		, "Hark, warrior! We darkness are not spawn, we are wonders. We hail from the dark abyss, and so might you. Part your light with me and I will show you the splendor and mystery of the dark abyss."},	

	{" Trick or Treat!",
		"Be safe out there!",
		" Watch out for spider webs!",
		" It's for Halloween!",
		" It's a treat.",
		" Here's a treat!"
		," It's spooky!",
		" It's for your courage!",
		" It may be magical!",
		" It probably haunted!",
		" It's creepy!",
		" It's bewitched!",
		" It's mysterious!"	
	},
	{"there are","there is","there exist","there's"},{" stop "," halt "," yield" ," sieze "," end "},
	{"many different","various","diverse","numerous"},
	{" items"," objects"," things"," goods"},{"magic","spells","witchcraft","alchemy"},{"the darkness","the dark cloud",",the dark hive","the dark realm","the dark place","the dark plane"},{"begin","start","initialize","conceptualize","portray",},
	{"that you can wear","that you can put on","that you can dress in","that you can adorn yourself with"},
	{"each one is unique","each one is special","each one is distinct","each one is different"},
	{"It's important to have","It's essential to have","It's vital to have","It's necessary to have"},
	{"the best items equipped","the best items ready","the best items prepared","the best items available"},
	{"for any situation","for any circumstance","for any scenario","for any eventuality"},
	{"have you heard of","do you know of","are you aware of","are you familiar with"},
	{"the legendary key-blade","the mythical key-blade","the fabled key-blade","the legendary key-sword"},
	{"They say those things","They tell of those objects","There are legends of those","They speak of those"},
	{"one of the few things","one of the rare things","one of the scarce things","one of the uncommon things"},
	{"that can defeat the darkness","that can overcome the darkness","that can vanquish the darkness","that can conquer the darkness"},
	{"there is a legend about","there is a myth about","there is a tale about","there is a story about"},
	{"the a powerful keyblade called X-Blade","the a mighty keyblade called X-Blade","the a formidable keyblade called X-Blade","the a robust keyblade called X-Blade"},
	{"it was said only the strongest of wielders could use its might","it was said only the most powerful of wielders could use its force","it was said only the most potent of wielders could use its strength","it was said only the most capable of wielders could use its power"},
	{"and in dire circumstances only!","and in desperate situations only!","and in critical conditions only!","and in urgent cases only!"},
	{"there are many plants, herbs, and materials to collect","there are various plants, herbs, and materials to gather","there are diverse plants, herbs, and materials to acquire","there are numerous plants, herbs, and materials to obtain"},
	{"that can be combined to create stronger items!","that can be mixed to make more powerful items!","that can be blended to produce more potent items!","that can be fused to craft more effective items!"},
	{"It's important to know what's you're looking for.","It's essential to know what you're searching for.","It's vital to know what you're seeking.","It's necessary to know what you're finding."},
	{"They can also sell for a pretty chunk of gold too.","They can also sell for a handsome amount of gold too.","They can also sell for a nice sum of gold too.","They can also sell for a good deal of gold too."},
	{"there are many fish in the seas.","there are various fish in the oceans.","there are diverse fish in the waters.","there are numerous fish in the lakes."},
	{"Some more valuable than others.","Some more precious than others.","Some more costly than others.","Some more expensive than others."},
	{"But all delicious nonetheless!","But all tasty nonetheless!","But all yummy nonetheless!","But all savory nonetheless!"},
	{"Especially if you cook them first.","Especially if you roast them first.","Especially if you grill them first.","Especially if you bake them first."},
	{"there is a nice armor shop around here somewhere.","there is a fine armor shop around here somewhere.","there is a splendid armor shop around here somewhere.","there is a superb armor shop around here somewhere."},
	{"I hear they change stock regularly!","I hear they rotate stock frequently!","I hear they switch stock often!","I hear they update stock constantly!"},
	{"It's important to check back every so often.","It's essential to check back once in a while.","It's vital to check back now and then.","It's necessary to check back from time to time."},
	{"You never know when you will find a really good set of magical armor that perfectly suits your needs.","You never know when you will find a great set of enchanted armor that ideally suits your needs.","You never know when you will find an excellent set of bewitched armor that precisely suits your needs.","You never know when you will find a superb set of charmed armor that exactly suits your needs."},
	{"there is a nice staff shop that caters to mages...","there is a fine staff shop that serves mages...","there is a splendid staff shop that assists mages...","there is a superb staff shop that helps mages..."},
	{"They often have basic staffs and wands stocked but you never know when you may find something special.","They usually have simple staffs and wands stocked but you never know when you might find something extraordinary.","They commonly have plain staffs and wands stocked but you never know when you could find something remarkable.","They frequently have standard staffs and wands stocked but you never know when you may find something amazing."},
	{"They say the best ones have a tradeoff. Like offering your soul to wield it. Creepy!","They say the best ones have a drawback. Like giving up your soul to wield it. Spooky!","They say the best ones have a disadvantage. Like sacrificing your soul to wield it. Scary!","They say the best ones have a downside. Like losing your soul to wield it. Eerie!"},
	{"research has identified over 57 species of the darkness...","research has discovered over 57 species of the darkness...","research has found over 57 species of the darkness...","research has uncovered over 57 species of the darkness..."},
	{"It's said they are based are dominant entities that replicate themselves with the assistance of the dark cloud...","It's said they are based on powerful entities that reproduce themselves with the help of the dark cloud...","It's said they are based off mighty entities that duplicate themselves with the aid of the dark cloud...","It's said they are based upon formidable entities that clone themselves with the support of the dark cloud..."},
	{"It's said sometimes they possess some form of sentience and other times they come in more powerful variants...","It's said sometimes they have some form of intelligence and other times they appear in more potent variants...","It's said sometimes they exhibit some form of awareness and other times they emerge in more effective variants...","It's said sometimes they show some form of consciousness and other times they arise in more forceful variants..."},
	{"it is said those keyblade wielders of legend who were pure of heart could transform into angels.","it is said those keyblade wielders of myth who were innocent of heart could transform into angels.","it is said those keyblade wielders of tale who were virtuous of heart could transform into angels.","it is said those keyblade wielders of story who were noble of heart could transform into angels."},
	{"Magnificent! Imagine having wings and being able to fly! Traveling would be soo much easier.","Splendid! Imagine having wings and being able to soar! Traveling would be soo much simpler.","Wonderful! Imagine having wings and being able to glide! Traveling would be soo much smoother.","Marvelous! Imagine having wings and being able to hover! Traveling would be soo much faster."},
	{"It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon chimeras! Half man, half dragon! Can you believe it? I wonder if they have horns and tails. They must've looked breathtaking and terrifying.","It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon hybrids! Half man, half dragon! Can you imagine it? I wonder if they have scales and claws. They must've looked stunning and horrifying.","It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon crossbreeds! Half man, half dragon! Can you picture it? I wonder if they have wings and fangs. They must've looked amazing and frightening.","It is told that during the Dark Magus Wars that the dragon-kin sorcerers could transform into dragon mixes! Half man, half dragon! Can you envision it? I wonder if they have spikes and fire. They must've looked awesome and daunting."},
	{"There are many different types of potions.","There are various types of potions.","There are diverse types of potions.","There are numerous types of potions."},
	{"Some heal your health or magic energy while others increase your stats for a limited time.","Some restore your health or magic energy while others boost your stats for a short time.","Some recover your health or magic energy while others enhance your stats for a brief time.","Some replenish your health or magic energy while others raise your stats for a little time."},
	{"It's important to know what you need for each situation. Especially when you're in a pinch. Knowing where your health potions are could mean the different between victory and peril.","It's essential to know what you need for each situation. Especially when you're in a bind. Knowing where your health potions are could mean the difference between success and danger.","It's vital to know what you need for each situation. Especially when you're in a jam. Knowing where your health potions are could mean the difference between triumph and risk.","It's necessary to know what you need for each situation. Especially when you're in a tight spot. Knowing where your health potions are could mean the difference between glory and threat."},
	{"there is a shop somewhere around here that sells capes.","there is a store somewhere around here that sells capes.","there is a market somewhere around here that sells capes.","there is a boutique somewhere around here that sells capes."},
	{"Once you find it you should have a look! I bet you would find something to your liking. If not you can come back. They may have a new inventory for you.","Once you find it you should take a look! I bet you would find something to your taste. If not you can return. They might have a new stock for you.","Once you find it you should give it a look! I bet you would find something to your preference. If not you can come again. They could have a new supply for you.","Once you find it you should have a peek! I bet you would find something to your choice. If not you can revisit. They may have a new selection for you."},
	{"there is a neat little jewelry store around here that sells all types of powerful magic amulets, necklaces and circlets. Each one has powerful unique abilities.","there is a tidy little jewelry store around here that sells all kinds of potent magic amulets, necklaces and circlets. Each one has potent unique abilities.","there is a clean little jewelry store around here that sells all sorts of effective magic amulets, necklaces and circlets. Each one has effective unique abilities.","there is a nice little jewelry store around here that sells all varieties of forceful magic amulets, necklaces and circlets. Each one has forceful unique abilities."},
	{"there is a blacksmith around here somewhere that sells all kinds of sturdy and magical shields! You should have a look. Shields can offer you great defensive and offensive capabilities.","there is a blacksmith around here somewhere that sells all kinds of solid and magical shields! You should take a look. Shields can offer you excellent defensive and offensive capabilities.","there is a blacksmith around here somewhere that sells all kinds of durable and magical shields! You should give it a look. Shields can offer you outstanding defensive and offensive capabilities."},
	{"there is a blacksmith around here somewhere that sells all kinds of durable and magical shields! You should give it a look","there is a blacksmith around here somewhere that sells all kinds of tough and magical shields! You should have a peek","there is a blacksmith around here somewhere that sells all kinds of strong and magical shields! You should take a glance","there is a blacksmith around here somewhere that sells all kinds of hardy and magical shields! You should get a glimpse"},
	{"Shields can offer you great defensive and offensive capabilities.","Shields can offer you excellent defensive and offensive capabilities.","Shields can offer you outstanding defensive and offensive capabilities.","Shields can offer you superb defensive and offensive capabilities."},
	{"due to the amplification of abilities by magic the greatests and most powerful swordsmen undergo much training to dual-wield swords.","due to the enhancement of abilities by magic the best and most potent swordsmen undergo much training to dual-wield swords.","due to the improvement of abilities by magic the finest and most capable swordsmen undergo much training to dual-wield swords.","due to the boost of abilities by magic the top and most skillful swordsmen undergo much training to dual-wield swords."},
	{"there are many tomes of knowledge to discover that may increase your abilities with certain items.","there are various tomes of knowledge to find that might increase your abilities with certain items.","there are diverse tomes of knowledge to uncover that could increase your abilities with certain items.","there are numerous tomes of knowledge to reveal that may increase your abilities with certain items."},
	{"I've heard word of a special sorcerer blacksmith who can increase the capabilities of your weapons...But he requires magical crystals...","I've heard rumor of a special sorcerer blacksmith who can enhance the capabilities of your weapons...But he requires magical crystals...","I've heard gossip of a special sorcerer blacksmith who can improve the capabilities of your weapons...But he requires magical crystals...","I've heard talk of a special sorcerer blacksmith who can boost the capabilities of your weapons...But he requires magical crystals..."},
	{"around here somewhere should be a delightful little food stand that sells a variety of delectable food stuffs. Be sure to shoot them a visit.","around here somewhere should be a lovely little food stand that sells a variety of delicious food stuffs. Be sure to pay them a visit.","around here somewhere should be a charming little food stand that sells a variety of tasty food stuffs. Be sure to give them a visit.","around here somewhere should be a pleasant little food stand that sells a variety of savory food stuffs. Be sure to drop them a visit."},
	{"for mages as they get stronger there are certain abilities they can learn to increase their power. A true mage would master them all.","for mages as they get stronger there are certain abilities they can learn to enhance their power. A true mage would master them all.","for mages as they get stronger there are certain abilities they can learn to improve their power. A true mage would master them all.","for mages as they get stronger there are certain abilities they can learn to boost their power. A true mage would master them all."},
	{"in this region there are over 68 spells for a mage to master. It's important to learn them all to become the strongest mage.","in this region there are over 68 spells for a mage to master. It's essential to learn them all to become the most powerful mage.","in this region there are over 68 spells for a mage to master. It's vital to learn them all to become the most potent mage.","in this region there are over 68 spells for a mage to master. It's necessary to learn them all to become the most capable mage."},
	{"there is a legend about an underground city... In it is said to reside none other than mermaids! Who would've thought? Apparently their culture is completely isolated but only hundreds of years behind us.","there is a myth about an underground city... In it is said to dwell none other than mermaids! Who would've guessed? Apparently their culture is totally isolated but only hundreds of years behind us.","there is a tale about an underground city... In it is said to live none other than mermaids! Who would've imagined? Apparently their culture is utterly isolated but only hundreds of years behind us.","there is a story about an underground city... In it is said to inhabit none other than mermaids! Who would've envisioned? Apparently their culture is entirely isolated but only hundreds of years behind us."},{"It is said,","It is told,","So they say,"},
	{"First,","Firstly,","To begin with,","To start with,","To start off,"},
	{"Furthermore,","Next,","After that,"},
	{"Finally,","In conclusion,","To finish off,","To end things off,"},
	{"Did you know that", "Let me share with you a secret", "You might be curious about"},
	{"Have you ever wondered about", "Let me tell you a story about"},
	{"Speaking of which,","By the way,","On the other hand,","In addition to that","Another thing to consider is","You should also know that"},
	{"As you can see,","I hope you learned something new","That’s all for now,","Thank you for listening,","Until next time,"},{"there are","there is","there exist","there's"},{" stop "," halt "," yield "," end "},
	{"different","various","diverse","numerous"},
	{"items","objects","things","goods"},{"magic","spells","witchcraft","alchemy"},{"the darkness","the dark cloud",",the dark hive","the dark realm","the dark place","the dark plane"},{"begin","start"},
	{"that you can wear","that you can put on","that you can dress in","that you can adorn yourself with"},
	{"each one is unique","each one is special","each one is distinct","each one is different"},
	{"It's important to have","It's essential to have","It's vital to have","It's necessary to have"},
	{"the best items equipped","the best items ready","the best items prepared","the best items available"},
	{"for any situation","for any circumstance","for any scenario","for any eventuality"},
	{"have you heard of","do you know of","are you aware of","are you familiar with"},
	{"the legendary key-blade","the mythical key-blade","the fabled key-blade","the legendary key-sword"},
	{"They say those things","They tell of those objects","There are legends of those","They speak of those"},
	{"one of the few things","one of the rare things","one of the scarce things","one of the uncommon things"},
	{"that can defeat the darkness","that can overcome the darkness","that can vanquish the darkness","that can conquer the darkness"},
	{"there is a legend about","there is a myth about","there is a tale about","there is a story about"},{"the a powerful keyblade called X-Blade","the a mighty keyblade"},{"mischevious ","cunning ","gawking ","evil"}}
	
end
function chatmodule.hash(str)
	local h = 0
	for i = 1, #str do
		h = h + string.byte(str, i)
	end
	return h
end
function chatmodule.CustomSeed(Seed,name)
	local seed = chatmodule.hash(name) 
	math.randomseed(seed)
	globalrng=Random.new(math.random(1,999999))
return	globalrng
end

function chatmodule.GlobalSeed()
	return globalrng
end

function chatmodule.returnblacklist()
	return blacklist
end

function chatmodule.hash(str)
	local h = 0
	for i = 1, #str do
		h = h + string.byte(str, i)
	end
	return h
end
function chatmodule.splitString(str,filter)
	local words = {}
	if filter==true then 
		str=chatmodule.ReduceQuery(str)
	end
	if str~=nil then	
		if str:gmatch("%w+") then
		for word in str:gmatch("%w+") do -- %w+ matches one or more alphanumeric characters
			
					table.insert(words, word) -- insert the word into the words array
				
			end
		else return {str}	
		end	
		return words	
	end	

end	

function chatmodule.mergetable (t1, t2)
--	--print(t1,t2)
	if t1 == nil then -- check if the first table is nil
		return t2 -- return the second table as is
	elseif t2 == nil then -- check if the second table is nil
		return t1 -- return the first table as is
	else -- if both tables are not nil
		for i, v in ipairs (t2) do -- loop over the second table
			t1 [#t1+i] = v -- insert each value into the first table
		end
		----print(t1)
		return t1 -- return the combined table
	end
end

-- This function takes a word and a table of synonyms as arguments and returns true if the word is in the table or false otherwise


function chatmodule.weighpattern(str, keyword)
	local count = 0
	local words=chatmodule.splitString(str)
	local weight=#words
	for _, word in ipairs(words) do
		if word:lower() == keyword:lower() or word:lower().."?" == keyword:lower() or word:lower() == keyword:lower().."." or word:lower().."." == keyword:lower() or word:lower().."'s" == keyword:lower() or word:lower() == keyword:lower().."'s" then -- compare the words in lowercase
			local input = string.gsub(keyword, "%s+", "")
			emoji = string.gsub(keyword, "%s+", "")
			for i=1,math.min(#input, #emoji) do
				if input:sub(i,i) == emoji:sub(i,i) then
					count = count + .5/math.min(#input, #emoji)
				end 
			end
			count = count + .5 -- increment the count if there is a match
		end
	end
	return (count/weight)
end


function chatmodule.find_closest_match(emojis,input)
	local best_match=nil
	local best_score=0	
	input = string.gsub(input, "%s+", "")
	for _, emoji in ipairs(emojis) do
		local score = 0
		local emojiconstruct = string.gsub(emoji, "%s+", "")
		for i=1,math.min(#input, #emojiconstruct) do
			if input:sub(i,i) == emojiconstruct:sub(i,i) then
				score = score + 1
			end 
		end
		if not best_match or score > best_score then
			best_match = emoji
			best_score = score
		end
	end
	return best_match
end

function chatmodule.findBestMatch(strings, keyword,filter,mode,complete)
	local bestMatch = nil -- the best match string
	local bestCount = 0 -- the highest count of keyword occurrences
	local best_match, strm
	local bestweight
	local synomarray={}
	local words2 = chatmodule.splitString(keyword,filter)
	for _, originword in ipairs(words2) do	
		if complete==true then
			local syn=chatmodule.Getsynonyms(originword,complete)
			table.insert(synomarray,syn)
			--print(synoynms)
		else
			synomarray={{originword}}--double nestedtable
		end	
	end
		
		
	for i, str in ipairs(strings) do -- loop through the strings in the table
		--str=strings[i]
		local str=str 
		if strings[i]~=nil then
			str= strings[i]
		else 
			str=str
		end
		--if filter==true then	
			--strm=chatmodule.ReduceQuery(str)	
		--else strm=str	
		--end
		local check=false
		if blacklist then
		for i, blkl in ipairs(blacklist) do 
			
			if str==blkl then
				check=true
			end
			end
		end	
		if check==false then
			local count,weight = chatmodule.countKeyword(str, synomarray,filter,complete) 
			if mode==true then
				count=count/weight
			end	
			if count> bestCount then -- if the count is higher than the best count so far
				bestMatch = str -- update the best match string
				bestCount = count-- update the best count number
				bestweight=weight	
			end
		end	
	end
	--if bestMatch then
	--print(bestMatch.." "..keyword.." "..table.concat(words2," "))
	--end	
	return bestMatch, bestCount,bestweight -- return the best match and its count
end
lowertable={"?",".","'s",}
local vocabulary={}
function chatmodule.countKeyword(str, synomarray,filter,complete)
	local count = 0
	local words=chatmodule.splitString(str,filter)
	
	local weight=#words
	local BlacklistedKeyword=nil
	local synoynms=nil
	for _, words2 in ipairs(synomarray) do	
	for _, keyword in ipairs(words2) do	
			for _, word in ipairs(words) do		
				local word=word:lower()
				local keyword=keyword:lower()
				if word == keyword then 
				count = count + 1
				--elseif keyword:find(word) then
				--count = count + 1
				
			end
			end
			end
			end
	return count,weight
end

function chatmodule.unpackString(str)
	local words = {} -- create an empty table
	local word
	for word in string:gmatch("%S+") do -- loop through the string and match non-space characters
		table.insert(words, word) -- insert the word into the table
	end
	return tostring(words) -- return the table
end
local phonemes = {

	-- Vowels
	["a"] = 220,
	["e"] = 329,
	["i"] = 440,
	["o"] = 440,
	["u"] = 370,

	-- Consonants
	["b"] = 155,
	["ch"] = 350,
	["d"] = 147,
	["f"] = 349,
	["g"] = 196,
	["h"] = 246,
	["j"] = 233,
	["k"] = 440,
	["l"] = 147,
	["m"] = 147,
	["n"] = 196,
	["p"] = 131,
	["q"] = 207,
	["r"] = 131,
	["s"] = 415,

	["sh"] = 622,
	["t"] = 261,
	["th"] = 370,
	["v"] = 370,
	["w"] = 370,
	["x"] = 523,
	["y"] = 659,
	["z"] = 466,
	["zh"] = 740,

	-- Diphthongs
	["ai"] = 330,
	["au"] = 350,
	["aw"] = 320,
	["ay"] = 300,
	["ea"] = 220,
	["ee"] = 400,
	["ei"] = 270,
	["eu"] = 200,
	["ew"] = 250,
	["ie"] = 300,
	["oi"] = 280,
	["oo"] = 440,
	["ou"] = 370,
	["ow"] = 320,
	["oy"] = 270,

	-- Combinations
	["ble"] = 200,
	["bre"] = 180,
	["chr"] = 260,
	["ck"] = 470,
	["dge"] = 210,
	["gn"] = 240,
	["ght"] = 300,
	["mb"] = 170,
	["mp"] = 210,
	["nd"] = 190,
	["ngh"] = 230,
	["ngth"] = 210,
	["nt"] = 200,
	["nth"] = 240,
	["pt"] = 270,
	["qu"] = 300,
	["sp"] = 220,
	["st"] = 230,
	["str"] = 240,
	["thr"] = 280,
	["ts"] = 350,
	["tch"] = 330,
	["wn"] = 260,
	["wr"] = 210,
	["xt"] = 320,
	["zz"] = 420,

	-- Triphthongs
	["eau"] = 250,
	["iew"] = 280,
	["eou"] = 260,
	["iou"] = 290,
	["uoy"] = 230,
	["yoo"] = 340
}
local ABCsPairs = {
	-- Each entry is a key-value pair: the key is the letter and the value is the number
	["a"] = 46, -- A
	["b"] = 24, -- B
	["c"] = 38, -- C
	["d"] = 22, -- D
	["e"] = 30, -- E
	["f"] = 34, -- F
	["g"] = 16, -- G
	["h"] = 20, -- H
	["i"] = 32, -- I
	["j"] = 28, -- J
	["k"] = 42, -- K
	["l"] = 16, -- L
	["m"] = 22, -- M
	["n"] = 21, -- N
	["o"] = 10, -- O
	["p"] = 20, -- P
	["q"] = 29, -- Q
	["r"] = 24, -- R
	["s"] = 38, -- S
	["t"] = 20, -- T
	["u"] = 23, -- U
	["v"] = 24, -- V
	["w"] = 46, -- W
	["x"] = 24, -- X
	["y"] = 38, -- Y
	["z"] = 27 -- Z	
}

function chatmodule.objectstostrings(tbl)
	-- Create an empty table to store the strings
	local Strings = {}
	-- Loop through the table of objects
	for i, obj in ipairs(tbl) do
		-- Get the name of the object and append it to the Strings table
		local name = obj.Name
		table.insert(Strings, name)
	end
	-- Return the Strings table
	return Strings
end

function chatmodule.texttosound(letter,textLabel,keyof)
	-- Get the current note and its length from the sheet music table
	
	if phonemes[letter]~=nil then
		
		local Note = phonemes[letter]/10
			-- Get the key and the sound that correspond to the note from the keys table and the notemap table

			-- Highlight the key by changing its color slightly

			chatmodule.PlaySound(Note,textLabel)
		-- Wait for the duration of the note in seconds
	end	
end
function chatmodule.texttosound2(letter,textLabel)
	-- Get the current note and its length from the sheet music table

	if ABCsPairs[letter]~=nil then

		local Note = ABCsPairs[letter]
		-- Get the key and the sound that correspond to the note from the keys table and the notemap table

		-- Highlight the key by changing its color slightly

		chatmodule.PlaySound(Note,textLabel)
		-- Wait for the duration of the note in seconds
	end	
end
local TweenService=game:GetService("TweenService")
local Voicetween=nil
function chatmodule.PlaySound(Key,textLabel)
	local Sound = textLabel.Parent.Piano
		-- If there is a sound, play it with some random variations
		if Sound then
		
		local guSound=Sound
		--	guSound.Parent=guSound2.Parent
		local prevv=guSound.Volume
		local delays2
		local delays	
		--guSound.Volume=0
		--guSound.Volume=0
		local goal = {}
		--goal.PlaybackSpeed = 0 + (Key/14)-(chatmodule.mathrandom(1,5)/100)
		goal.Pitch = 0 + (Key/112)-- set the pitch according to the key index
		goal.Volume = .2+(guSound.Pitch/10)  
		goal.PlaybackSpeed=2+(guSound.Pitch/10)  
		--goal.PlaybackSpeed=0
		local tweenInfo = TweenInfo.new(guSound.TimeLength)
		if Voicetween~=nil then
			Voicetween:Pause()
		end
		Voicetween = TweenService:Create(guSound, tweenInfo, goal)
		Voicetween:Play()
		guSound:Play() 	
	end
	--	Key.BackgroundColor3 = Key.BackgroundColor3:Lerp(Color3.new(0.5, 0.5, 0.5), 0.2)
end

function chatmodule.tweenSound(Sound)
	-- If there is a sound, play it with some random variations
	if Sound then

		local guSound=Sound
		--	guSound.Parent=guSound2.Parent
		local prevv=guSound.Volume
		local delays2
		local delays	
		--guSound.Volume=0
		--guSound.Volume=0
		local goal = {}
		goal.PlaybackSpeed = 10
		goal.Pitch = 1-(chatmodule.mathrandom(-20,20)/100) -- set the pitch according to the key index	
		goal.Volume = .5 
		--goal.PlaybackSpeed=0
		local tweenInfo = TweenInfo.new(guSound.TimeLength*.125)
		
		local tween = TweenService:Create(guSound, tweenInfo, goal)
		tween:Play()
		
		guSound:Play() 	
		task.delay(guSound.TimeLength-(guSound.TimeLength*.125),function()
			local goal = {}
			goal.Volume = .0 
		--goal.PlaybackSpeed=0
		local tweenInfo = TweenInfo.new(guSound.TimeLength*.125)

		local tween = TweenService:Create(guSound, tweenInfo, goal)
		tween:Play()
		end)
	end
	--	Key.BackgroundColor3 = Key.BackgroundColor3:Lerp(Color3.new(0.5, 0.5, 0.5), 0.2)
end

local busy=false
-- Define a queue class
moduleque=0
emojimod=require(BotResource.EmojiHandler)
local punctuations = {"...", ".", "?", "!"}

emojitbl=emojimod.GetEmojisStrings()
function chatmodule.InsertEmojis(str)
	--if string.len(str)>4 then
	local emoji= chatmodule.CompleteQuery(str,emojitbl,1,true,false,false,false,false)
		if emoji~=nil then
			local emojisign=emojimod.GetEmoji(emoji)
			--print("Emoji inserted")
			if emojisign~=nil then
				str = str.." ".. emojisign
			end		
		end
		return str	
end
local function getPhoneticParts(text)

	local parts = {}
	local text=text
	for i = 1, #text do

		local pair = text:sub(i, i+1)
		if phonemes[pair] then
			table.insert(parts, pair)
			i = i + 1 -- advance past pair
		else
			table.insert(parts, text:sub(i,i))
		end
	end

	return parts

end

function chatmodule.displayString(textLabel, str)
	--local words = chatmodule.splitString(str) -- unpack the string into words
	-- the string to separate
		if moduleque==1 then
			repeat wait() until moduleque==0
		end
		moduleque=moduleque+1
	--print(moduleque)
	local currentslot=moduleque
	--if textLabel.TextTransparency~=1 then
	--	repeat wait(currentslot) until textLabel.TextTransparency==1 and currentslot<=currentslot or moduleque==1
	--end
		busy=true
		--str=chatmodule.InsertEmojis(str)
		if moduleque>1 then
		local curtext=textLabel.Text	
		repeat
			task.wait(currentslot)
			until busy==false or curtext==textLabel.Text
			if moduleque>2 then
				moduleque=moduleque-1
			end
	elseif moduleque==1 then
		busy=false
	end	
	local words = {}
	for i = 1, #str do -- loop from 1 to the length of the string
		local char = string.sub(str, i, i) -- get the character at index i
		table.insert(words, char) -- insert the character into the table
	end

	
	--local words=
	local index = 1 -- create an index variable to keep track of the current word
	local text = "" -- create an empty text variable to store the displayed text
	local Emotion=chatmodule.getemotion(str)
	if Emotion~=nil then
	local Sounds=game.ReplicatedStorage.Audio.Transitions:FindFirstChild(Emotion)
	if Sounds~=nil then
		local Sounddir=Sounds:GetChildren()
		local soun=Sounddir[chatmodule.mathrandom(1,#Sounddir)]
		chatmodule.tweenSound(soun)
		end
	end	
	tmo.TweenTransparency(textLabel,.5,Enum.EasingStyle.Cubic,0)
	local charindex=1
	local newsent=false
	while index <= #words do
		-- loop while the index is less than or equal to the number of words		
		local 	charact=words[index]
		chatmodule.texttosound2(charact,textLabel)
		if (newsent==true and charact~=" ") or (newsent==true and charact==" " and charindex==1) then
				text=""
				if (newsent==true and charact==" " and charindex==1) then
					charact=string.upper(charact)
			end
				tmo.TweenTransparency(textLabel,.5,Enum.EasingStyle.Cubic,0)
				newsent=false
		end
			if index==#words and  (charact~="." or charact=="?" or charact=="," or charact=="!") or (charact==" " and charindex>50 and index+5<#words) then
		
			if charact=="," then
				charact="."		
			else 
				charact=charact
			end	
			
		else
		charact=charact -- append the current word and a space to the text			
		end
		 -- update the text label with the text
			--for i = 1, #charact do -- loop from 1 to the length of the string
			text=text..charact	
			if (charindex>50 and ((charact=="."and words[index+1]~="." ) or (charact=="?" or charact==",")))  or (charact==" " and charindex>50 and index+5<#words) and newsent~=true  then	
				task.wait(.0333)
				local Emotion=chatmodule.getemotion(text)
				if Emotion~=nil then
					local Sounds=game.ReplicatedStorage.Audio.Transitions:FindFirstChild(Emotion)
					if Sounds~=nil then
						local Sounddir=Sounds:GetChildren()
						local soun=Sounddir[chatmodule.mathrandom(1,#Sounddir)]
						chatmodule.tweenSound(soun)
					end
				end	
				text=chatmodule.InsertEmojis(text)
				task.wait(.0333)
				textLabel.Text=text
				task.wait(.75)
			tmo.TweenTransparency(textLabel,.5,Enum.EasingStyle.Cubic,1)
			task.wait(.5)
			charindex=0
			newsent=true
		
			if busy==true then
				index=#words
				break
			end
			else
				textLabel.Text = text
				task.wait(.0333)	
			end
		index = index + 1 -- increment the index by one
		charindex=charindex+1
		
			--end

end
	task.wait(.6)
	if textLabel.TextTransparency~=1 then
		tmo.TweenTransparency(textLabel,.5,Enum.EasingStyle.Cubic,1)
		task.wait(.5)
	end	
	
		if moduleque>0 then
			moduleque=moduleque-1
		end	
		busy=false	
end

function chatmodule.InterpretGeometryQuestion(str)
	-- Get the shapes table from the ReplicatedStorage
	--local Shapes = game.ReplicatedStorage.Items.Shapes.Icons:GetChildren()
	-- Pick a random shape from the Shapes table
	--local Shape = Shapes[chatmodule.mathrandom(1, #Shapes)].Name
	local Answer=nil
	local Shape
	-- Define the opening phrases for the word problem	
	-- Define the questions for each shape	
	local open=chatmodule.CompleteQuery(str,Opening,false,true,false)
	--check context database 
	local square,rectangle,circle,triangle=nil,nil,nil,nil
	local qsquare,qrectangle,qtriangle,qcircle
	 square=chatmodule.SearchQuery(str,SquareConstruct,true,true,false)		
	if not square then
	rectangle=chatmodule.SearchQuery(str,RectangleConstruct,true,true,false)	
		if not rectangle then	
		circle=chatmodule.SearchQuery(str,CircleConstruct,true,true,false)	
			if not circle then	
	triangle=chatmodule.SearchQuery(str,TriangleConstruct,false,true,false)	
			end
		end 
	end	
				--check question database
	
	if square then qsquare=chatmodule.CompleteQuery(str,SquareQuestion,false,true,false)	
	elseif rectangle then	qrectangle=chatmodule.CompleteQuery(str,RectangleQuestion,false,true,false)	
	elseif circle then	
		qcircle=chatmodule.CompleteQuery(str,CircleQuestion,false,true,false)	
	elseif triangle then	
		qtriangle=chatmodule.CompleteQuery(str,TriangleQuestion,false,true,false)
	end	
if square or rectangle or circle or triangle then	
	local score=0
	local QuestionPhrase = nil
	if open~=nil then score=score+1 end
	if square~=nil and qsquare~=nil then
		Shape="Square"
		QuestionPhrase = qsquare
	elseif rectangle~=nil and qrectangle~=nil  then
		Shape="Rectangle"
		QuestionPhrase = qrectangle
	elseif circle~=nil and qcircle~=nil then
		Shape="Circle"
		QuestionPhrase = qcircle
	elseif triangle~=nil and qtriangle~=nil then
		Shape="Triangle"
		 QuestionPhrase = qtriangle
	end	
	-- Define some random numbers for the dimensions
	--local Num1 = chatmodule.mathrandom(1, 10)
	--local Num2 = chatmodule.mathrandom(1, 10)
	local function SplitQuery(query, num1)
		local parts = {}
		-- Find index of first number in query
		local num1Index = string.find(query, tostring(num1))
		-- Get substring before number 
		parts[1] = string.sub(query, 1, num1Index - 1)
		-- Get substring after number
		parts[2] = string.sub(query, num1Index + 1)
		return parts[1], parts[2]
	end
		
	local function GetNumber(query)
		local Num1, Num2 = nil, nil
		local identifers={"length","width","diameter","radius"}
		local identifier=nil
		local part1,part2=nil,nil
		for word in string.gmatch(query, "%S+") do
			if tonumber(word) then 
				if not Num1 then
					Num1 = tonumber(word) 
					part1,part2=SplitQuery(query,Num1)
					identifier=chatmodule.SearchQuery(part1,identifers,false,true,false)
				else
					if identifier==nil then
						identifier=chatmodule.SearchQuery(part2,identifers,false,true,false)
					end
					Num2 = tonumber(word)
					break -- stop after 2 numbers found
				end
			end
		end
		return Num1,Num2,identifier
	end
	local part1
	local	Num1,Num2,identfier=GetNumber(str)
	-- Pick a random phrase for the opening and the shape
	local OpeningPhrase=open
		if OpeningPhrase==nil then	OpeningPhrase= Opening[chatmodule.mathrandom(1, #Opening)] end
	local ShapePhrase = ""	
	if Shape == "Square" then
		ShapePhrase = square .. Num1 .. " units."
	elseif Shape == "Rectangle" then
		part1=chatmodule.SearchQuery(identfier,RectangleConstruct,false,true,false)
	local part2	
		if part1==RectangleConstruct[1] then
			part2=RectangleConstruct[2]
		else part2=RectangleConstruct[1]	
		end
	
		ShapePhrase = part1..Num1.." units and "..part2..Num2.." units."
	
	elseif Shape == "Circle" then
			part1=chatmodule.SearchQuery(identfier,CircleConstruct,false,true,false)
		
		ShapePhrase = part1 .. Num1 .. " units."

	elseif Shape == "Triangle" then
		
		ShapePhrase = TriangleConstruct[1] .. Num1 .. " units and " .. TriangleConstruct[2] .. Num2 .. " units."
	end
	-- Calculate the answer by applying the formula to the numbers
	local Answer = nil
	if Shape == "Square" then
		if QuestionPhrase == SquareQuestion[1] then -- area
			Answer = Num1 * Num1
		elseif QuestionPhrase == SquareQuestion[2] then -- perimeter
			Answer = Num1 * 4
		end
	elseif Shape == "Rectangle" then
		if QuestionPhrase == RectangleQuestion[1] then -- area
			Answer = Num1 * Num2
		elseif QuestionPhrase == RectangleQuestion[2] then -- perimeter
			Answer = (Num1 + Num2) * 2
		end
	elseif Shape == "Circle" then
		if QuestionPhrase == CircleQuestion[1] then -- area
			Answer = math.pi * Num1 * Num1 -- assuming radius
		elseif QuestionPhrase == CircleQuestion[2] then -- circumference
			Answer = math.pi * Num1 * 2 -- assuming diameter
		end
	elseif Shape == "Triangle" then
		if QuestionPhrase == TriangleQuestion[1] then -- area
			Answer = (Num1 * Num2) / 2 -- assuming base and height
		elseif QuestionPhrase == TriangleQuestion[2] then -- perimeter
			Answer = nil -- cannot be calculated without knowing all sides or angles
		end
		end
		
	if Answer then
		Answer = math.floor(Answer * 100 + 0.5) / 100 -- round to two decimal places
		Answer	= OpeningPhrase .. ShapePhrase .. " " .. QuestionPhrase.." The answer is "..Answer.."."
	else
		Answer = nil
	end
	-- Return the word problem and the answer as variables
		return  Answer
	else return nil	
	end	
end

local Operators = {
	["+"] = function(a, b) return (a + b) end, -- addition
	["-"] = function(a, b) return (a - b) end, -- subtraction
	["*"] = function(a, b) return (a * b) end, -- multiplication
	["/"] = function(a, b) return (a / b) end  -- division
}
function chatmodule.InterpretMathQuestion(str)
	-- Get the shapes table from the ReplicatedStorage
	local Result=nil

	local addition,subtraction,multiplication,division=nil,nil,nil,nil
	local addition=chatmodule.CompleteQuery(str,AddConstruct,true,true,false)	
	if addition==nil then
		subtraction=chatmodule.CompleteQuery(str,SubtractConstruct,true,true,false)	
	if subtraction==nil then	
			multiplication=chatmodule.CompleteQuery(str,MultiplyConstruct,true,true,false)	
	if multiplication==nil then		
				division=chatmodule.CompleteQuery(str,DivideConstruct,true,true,false)	
			end
		end
	end
	if multiplication or addition or subtraction or division then
	-- Create an array of keys from the Operators table
	local Keys = {}
	
	for k, v in pairs(Operators) do
		table.insert(Keys, k)
	end
	
	local function SplitQuery(query, num1)
		local parts = {}
		-- Find index of first number in query
		local num1Index = string.find(query, tostring(num1))
		-- Get substring before number 
		parts[1] = string.sub(query, 1, num1Index - 1)
		-- Get substring after number
		parts[2] = string.sub(query, num1Index + 1)
		return parts[1], parts[2]
	end

	local function GetNumber(query)
		local Num1, Num2 = nil, nil
		local identifier=nil
		local part1,part2=nil,nil
		for word in string.gmatch(query, "%S+") do
			if tonumber(word) then 
				if not Num1 then
					Num1 = tonumber(word) 
					part1,part2=SplitQuery(query,Num1)
				else
					if identifier==nil then
						
					end
					Num2 = tonumber(word)
					break -- stop after 2 numbers found
				end
			end
		end
		return Num1,Num2
	end
	-- Pick two random numbers between 1 and 10
	local Num1,Num2=GetNumber(str)
	-- Pick a random operator from the Operators table using the Keys array
	if Num1 and Num2 then
	local Key=nil 
	if addition~=nil then
			Key=AddConstruct[1]
			Keys=AddConstruct
	elseif subtraction~=nil then
			Key=SubtractConstruct[1]
			Keys=SubtractConstruct
	elseif multiplication~=nil then
			Key=MultiplyConstruct[1]
			Keys=MultiplyConstruct
	elseif division~=nil then
			Key=DivideConstruct[1]
			Keys=DivideConstruct
	end
	if Key~=nil then
			local Operator = Operators[Key]
	Key= Keys[chatmodule.mathrandom(1, #Keys)]
	local Symbol = Key
	local Key2
	local Operator2
	-- Get the symbol of the operator (same as the key)
	-- Calculate the answer by applying the operator function to the numbers
	local Answer = Operator(Num1, Num2)
	local Question = Num1..Symbol..Num2.."="..Answer	
		--print(Question,Answer)
	-- Return the word problem and the answer as variables
		Result=Question
		end	
		end	
	end
	return Result
end

function chatmodule.CreateWordProblem(Num1, Symbol, Num2)
	-- Get the subjects table from the ReplicatedStorage
	local Subjects = game.ReplicatedStorage.Items.Food.Icons:GetChildren()

	-- Pick a random subject from the Subjects table
	local Subject = Subjects[chatmodule.mathrandom(1, #Subjects)].Name

	-- Define the opening phrases for the word problem
	local Opening = {
		"If I have ", 
		"If I possess ", 
		"So we have ", 
		"So starting with ",
		"Imagine I have ",
		"Suppose I own ",
		"Let's say we have ",
		"Given that I start with "
	}
	local Answer
	-- Define the phrases for each operator
	local AddConstruct = {
		". Then, I add ", 
		". Furthermore, I gain ", 
		". In addition to that I have ", 
		". We obtain ", 
		". Then we acquire ",
		". After that, I receive ",
		". Besides that, I find ",
		". We also get ",
		". Then we collect "
	}
	local SubtractConstruct = {
		". I lose ", 
		". Taking away ", 
		". Say we no longer have ", 
		". So some of them have disappeared that is ",
		". I give away ",
		". Removing ",
		". Suppose we use up ",
		". So a few of them are gone that is ",
		". I donate "
	}
	local MultiplyConstruct = {
		". Then, I multiply them by ", 
		". Furthermore, I duplicate them ", 
		". In addition to that I get them times ", 
		". We increase those groups by a factor of ", 
		". After that, I replicate them all by ",
		". Besides that, I boost them all by ",
		". We multiply them by ",
	}
	local DivideConstruct = {
		". Then, I divide them by ", 
		". Furthermore, I split them amongst ", 
		". In addition to that I share them among ", 
		". We separate them into groups of ", 
		". Then we distribute amongst ",
		". After that, I seperate them into groups of ",
		". Besides that, I divide them equally among ",
		". We split them into groups of ",
		". Then we allocate by "
	}

	-- Define the closing phrases for the word problem
	local ClosingPhrase = {
		" So, how many "..Subject.." do I have left?",
		" Then, how many "..Subject.." do we have?",
		" What's there that remains of the "..Subject.."?",
		" Now what do we have left of the "..Subject.."?",
		" So, what is the final count of the "..Subject.."?",
		" Then, what is the total number of the "..Subject.."?",
		" How many "..Subject.." are left in the end?",
		" What is the final amount of the "..Subject.." left?"}

	-- Pick a random phrase for the opening and the operator
	local OpeningPhrase = Opening[chatmodule.mathrandom(1, #Opening)]
	local OperatorPhrase = ""
	if Symbol == "+" then
		OperatorPhrase = AddConstruct[chatmodule.mathrandom(1, #AddConstruct)]
	elseif Symbol == "-" then
		OperatorPhrase = SubtractConstruct[chatmodule.mathrandom(1, #SubtractConstruct)]
	elseif Symbol == "*" then
		OperatorPhrase = MultiplyConstruct[chatmodule.mathrandom(1, #MultiplyConstruct)]
	elseif Symbol == "/" then
		OperatorPhrase = DivideConstruct[chatmodule.mathrandom(1, #DivideConstruct)]
	end


	-- Calculate the answer by applying the operator to the numbers
	local Answer = nil
	if Symbol == "+" then
		Answer = Num1 + Num2
	elseif Symbol == "-" then
		Answer = Num1 - Num2
	elseif Symbol == "*" then
		Answer = Num1 * Num2
	elseif Symbol == "/" then
		Answer = Num1 / Num2
	end

	return Opening[chatmodule.mathrandom(1,#Opening)]..Num1.." "..Subject..OperatorPhrase..Num2.."."..ClosingPhrase[chatmodule.mathrandom(1,#ClosingPhrase)],Answer
end

function chatmodule.CreateGeometryQuestion(Num1,Num2,Shape)
	-- Get the shapes table from the ReplicatedStorage
	--local Shapes = game.ReplicatedStorage.Items.Shapes.Icons:GetChildren()

	-- Pick a random shape from the Shapes table
	--local Shape = Shapes[chatmodule.mathrandom(1, #Shapes)].Name

	-- Define the opening phrases for the word problem
	local Opening = {
		"If I have a ", 
		"If I possess a ", 
		"So we have a ", 
		"So starting with a ",
		"Imagine I have a ",
		"Suppose I own a ",
		"Let's say we have a ",
		"Given that I start with a "
	}

	-- Define the phrases for each shape
	local SquareConstruct = {
		"square with side length of ", 
		"square with edge width of ", 
		"square with each side measuring ", 
	}
	local RectangleConstruct = {
		"rectangle with length of ", 
		"and a width of ", 
	}
	local CircleConstruct = {
		"circle with radius of ", 
		" with diameter of ", 
	}
	local TriangleConstruct = {
		"triangle with base of ", 
		"and a height of ", 
	}

	-- Define the questions for each shape
	local SquareQuestion = {
		"What is the area of the square?",
		"What is the perimeter of the square?",
	}
	local RectangleQuestion = {
		"What is the area of the rectangle?",
		"What is the perimeter of the rectangle?",
	}
	local CircleQuestion = {
		"What is the area of the circle?",
		"What is the circumference of the circle?",
	}
	local TriangleQuestion = {
		"What is the area of the triangle?",
		"What is the perimeter of the triangle?",
	}

	-- Define some random numbers for the dimensions
	--local Num1 = chatmodule.mathrandom(1, 10)
	--local Num2 = chatmodule.mathrandom(1, 10)

	-- Pick a random phrase for the opening and the shape
	local OpeningPhrase = Opening[chatmodule.mathrandom(1, #Opening)]
	local ShapePhrase = ""
	local QuestionPhrase = ""
	if Shape == "Square" then
		ShapePhrase = SquareConstruct[chatmodule.mathrandom(1, #SquareConstruct)] .. Num1 .. " units."
		QuestionPhrase = SquareQuestion[chatmodule.mathrandom(1, #SquareQuestion)]
	elseif Shape == "Rectangle" then
		ShapePhrase = RectangleConstruct[1]..Num1.." units and "..RectangleConstruct[2]..Num2.." units."
		QuestionPhrase = RectangleQuestion[chatmodule.mathrandom(1, #RectangleQuestion)]
	elseif Shape == "Circle" then
		ShapePhrase = CircleConstruct[chatmodule.mathrandom(1, 2)] .. Num1 .. " units."
		QuestionPhrase = CircleQuestion[chatmodule.mathrandom(1, #CircleQuestion)]
	elseif Shape == "Triangle" then
		ShapePhrase = TriangleConstruct[1] .. Num1 .. " units and " .. TriangleConstruct[2] .. Num2 .. " units."
		QuestionPhrase = TriangleQuestion[chatmodule.mathrandom(1, #TriangleQuestion)]
	end

	-- Calculate the answer by applying the formula to the numbers
	local Answer = nil
	if Shape == "Square" then
		if QuestionPhrase == SquareQuestion[1] then -- area
			Answer = Num1 * Num1
		elseif QuestionPhrase == SquareQuestion[2] then -- perimeter
			Answer = Num1 * 4
		end
	elseif Shape == "Rectangle" then
		if QuestionPhrase == RectangleQuestion[1] then -- area
			Answer = Num1 * Num2
		elseif QuestionPhrase == RectangleQuestion[2] then -- perimeter
			Answer = (Num1 + Num2) * 2
		end
	elseif Shape == "Circle" then
		if QuestionPhrase == CircleQuestion[1] then -- area
			Answer = math.pi * Num1 * Num1 -- assuming radius
		elseif QuestionPhrase == CircleQuestion[2] then -- circumference
			Answer = math.pi * Num1 * 2 -- assuming radius
		end
	elseif Shape == "Triangle" then
		if QuestionPhrase == TriangleQuestion[1] then -- area
			Answer = (Num1 * Num2) / 2 -- assuming base and height
		elseif QuestionPhrase == TriangleQuestion[2] then -- perimeter
			Answer = nil -- cannot be calculated without knowing all sides or angles
		end
	end

	-- Format the word problem as a string and round the answer to two decimal places
	local WordProblem = OpeningPhrase .. ShapePhrase .. " " .. QuestionPhrase
	if Answer then
		Answer = math.floor(Answer * 100 + 0.5) / 100 -- round to two decimal places
	else
		Answer = "Cannot be calculated"
	end

	-- Return the word problem and the answer as variables
	return WordProblem, Answer
end

function chatmodule.CreateMathQuestion(Level)
	-- Define the possible operators and their corresponding functions
	-- Define the possible operators and their corresponding functions
	-- Define the possible operators and their corresponding functions
	local Operators = {
		["+"] = function(a, b) return (a + b) end, -- addition
		["-"] = function(a, b) return (a - b) end, -- subtraction
		["*"] = function(a, b) return (a * b) end, -- multiplication
		["/"] = function(a, b) return (a / b) end  -- division
	}


	-- Create an array of keys from the Operators table
	local Keys = {}
	for k, v in pairs(Operators) do
		table.insert(Keys, k)
	end

	-- Pick two random numbers between 1 and 10
	local Num1 = chatmodule.mathrandom(1, 1+Level)
	local Num2 = chatmodule.mathrandom(1, 1+Level)

	-- Pick a random operator from the Operators table using the Keys array
	local Key = Keys[chatmodule.mathrandom(1, #Keys)]
	local Operator = Operators[Key]
	local Symbol = Key

	if Symbol=="/" then
		Num1=Num2*chatmodule.mathrandom(1,1+Level)
	end
	if Symbol=="-" then
		if Num2>Num1 then 
			local Num3=Num1 
			Num1=Num2
			Num2=Num3
		end	
	end
	local Key2
	local Operator2

	-- Get the symbol of the operator (same as the key)

	-- Calculate the answer by applying the operator function to the numbers
	local Answer = Operator(Num1, Num2)
	local Question = Num1..Symbol..Num2.."= ?"	

	if Level>10 and chatmodule.mathrandom(1,2)==1 then
		Key2 = Keys[chatmodule.mathrandom(1, #Keys)]
		local Num3 = chatmodule.mathrandom(1, 1+Level)
		local Num4 = chatmodule.mathrandom(1, 1+Level)
		Operator2 = Operators[Key]
		local Symbol2 = Key2
		if Symbol2=="/" then
			Num1=Num2*chatmodule.mathrandom(1,1+Level)
		end
		if Symbol2=="-" then
			if Num2>Num1 then 
				local Num5=Num3 
				Num3=Num4
				Num4=Num5
			end	
		end	
		if Level>15 and chatmodule.mathrandom(1,2)==1 then
			local Key3 = Keys[chatmodule.mathrandom(1, 3)]
			local Operator3 = Operators[Key]
			Answer = Operator3(Operator(Num1, Num2),Operator2(Num3, Num4))
			Question = "("..Num1..Symbol..Num2..")"..Key3.."("..Num3..Symbol2..Num4..")= ?"		
		else
			Answer = Operator(Num1, Num2)+Operator2(Num3, Num4)
			Question = "("..Num1..Symbol..Num2..")+("..Num3..Symbol2..Num4..")= ?"	
		end
	end
	--if chatmodule.mathrandom(1,2)==1 then
	--CreateWordProblem(Num1, Symbol, Num2)
	--end
	-- Format the question as a string


	-- Return the question and the answer as variables
	if Level>3 and chatmodule.mathrandom(1,2)==1 then
		if Level>10 and chatmodule.mathrandom(1,2)==1 then
			local shapetable={}
			if Level>10 then
				table.insert(shapetable,"Square")	
			end
			if Level>12 then
				table.insert(shapetable,"Rectangle")
			end
			if Level>15 then
				table.insert(shapetable,"Triangle")
			end
			if Level>20 then
				table.insert(shapetable,"Circle")
			end
			chatmodule.CreateGeometryQuestion(Num1,Num2,shapetable[chatmodule.mathrandom(1,#shapetable)])
		else	
			return chatmodule.CreateWordProblem(Num1, Symbol, Num2)

		end	--Question
	else 
		--print(Question,Answer)
		return Question,Answer
	end	

end

--function chatmodule.reverseparagraph(str)
---- Split the string into sentences using the period as a separator
--	local sentences = {}
--	--print(str)
--	if typeof(str)~="number" then
--	if str:gmatch("[^%.%!%?]+") then
--	for s in str:gmatch("[^%.%!%?]+") do
--	-- Add each sentence to the table
--	table.insert(sentences, s)
--end
---- Keep the first sentence as it is
--local first = sentences[1]
---- Remove the first sentence from the table
--table.remove(sentences, 1)
---- Reverse the order of the remaining sentences in the table
--local reversed = {}
--for i = #sentences, 1, -1 do
--	-- Add each sentence to the new table in reverse order
--	table.insert(reversed, sentences[i])
--end
---- Join the first sentence with the reversed sentences with periods and return the result
--		return first .. "." .. table.concat(reversed, ".")
--	else 
--		return str
--		end	
--	else return str	
--	end	
--end

-- This function takes a string as an input and returns a string with randomized sentence order
function chatmodule.RandomizeSentences(input)
	-- Split the input string into a table of sentences based on punctuation marks
	
	local sentences = {}
	for sentence in input:gmatch("[^%.%?%!]+[%.%?%!]?") do
		table.insert(sentences, sentence)
	end
	-- Shuffle the table of sentences using the Fisher-Yates algorithm
	local n = #sentences
	for i = n, 2, -1 do
		local j = chatmodule.mathrandom(i) -- Pick a random index from 1 to i
		sentences[i], sentences[j] = sentences[j], sentences[i] -- Swap the elements at i and j
	end
	-- Concatenate the table of sentences back into a string and return it
	return table.concat(sentences, " ")
end

function chatmodule.StructureSentences(query,input)
	-- Split the input string into a table of sentences based on punctuation marks
	local words = chatmodule.splitString(query)
	local sentences = {}
	local matches = {} -- A table to store the matches and their scores
	local BlacklistedKeyword
	local result = nil 
	local score	
	for sentence in input:gmatch("[^%.%?%!]+[%.%?%!]?") do
		table.insert(sentences, sentence)
	end
	if #sentences>2 then
	for i, word in ipairs(words) do -- Loop through the words in the query
		--Blacklist a bunch of nouns and non context wwords.
		if typeof(word)=="number" then
			word=words[i]
		end	
		if word~=nil then
			
				local bestMatch,bestCount

				bestMatch, bestCount = chatmodule.findBestMatch(sentences, word,false,true)
				-- Find the best match and its count for each word using your findBestMatch function
				if bestMatch then -- If there is a match
					if matches[bestMatch] then -- If the match is already in the table
						matches[bestMatch] = matches[bestMatch] + bestCount -- Add the count to its score
					else -- If the match is not in the table yet
						matches[bestMatch] = bestCount -- Set its score to the count
					end
				end	
	
		end
	end
	local sortedMatches = {} -- A table to store the sorted matches by their scores
	for match, score in pairs(matches) do -- Loop through the matches and their scores
		table.insert(sortedMatches, {match = match, score = score}) 
	end	
	
	table.sort(sortedMatches, function(a, b) return a.score > b.score end)
	--print(sortedMatches)
	local sorted = {}
	for i,sentence in ipairs(sortedMatches) do
		table.insert(sorted, sortedMatches[i].match)
	end
	--print(sorted)
	return table.concat(sorted, ". ")
	else return input
	end	
end

function chatmodule.CreateWordProblem(Num1, Symbol, Num2)
	-- Get the subjects table from the ReplicatedStorage
	local Subjects = game.ReplicatedStorage.Items.Food.Icons:GetChildren()

	-- Pick a random subject from the Subjects table
	local Subject = Subjects[chatmodule.mathrandom(1, #Subjects)].Name

	-- Define the opening phrases for the word problem
	local Opening = {
		"If I have ", 
		"If I possess ", 
		"So we have ", 
		"So starting with ",
		"Imagine I have ",
		"Suppose I own ",
		"Let's say we have ",
		"Given that I start with "
	}
	local Answer
	-- Define the phrases for each operator
	local AddConstruct = {
		". Then, I add ", 
		". Furthermore, I gain ", 
		". In addition to that I have ", 
		". We obtain ", 
		". Then we acquire ",
		". After that, I receive ",
		". Besides that, I find ",
		". We also get ",
		". Then we collect "
	}
	local SubtractConstruct = {
		". I lose ", 
		". Taking away ", 
		". Say we no longer have ", 
		". So some of them have disappeared that is ",
		". I give away ",
		". Removing ",
		". Suppose we use up ",
		". So a few of them are gone that is ",
		". I donate "
	}
	local MultiplyConstruct = {
		". Then, I multiply them by ", 
		". Furthermore, I duplicate them ", 
		". In addition to that I get them times ", 
		". We increase those groups by a factor of ", 
		". After that, I replicate them all by ",
		". Besides that, I boost them all by ",
		". We multiply them by ",
	}
	local DivideConstruct = {
		". Then, I divide them by ", 
		". Furthermore, I split them amongst ", 
		". In addition to that I share them among ", 
		". We separate them into groups of ", 
		". Then we distribute amongst ",
		". After that, I seperate them into groups of ",
		". Besides that, I divide them equally among ",
		". We split them into groups of ",
		". Then we allocate by "
	}

	-- Define the closing phrases for the word problem
	local ClosingPhrase = {
		" So, how many "..Subject.." do I have left?",
		" Then, how many "..Subject.." do we have?",
		" What's there that remains of the "..Subject.."?",
		" Now what do we have left of the "..Subject.."?",
		" So, what is the final count of the "..Subject.."?",
		" Then, what is the total number of the "..Subject.."?",
		" How many "..Subject.." are left in the end?",
		" What is the final amount of the "..Subject.." left?"}

	-- Pick a random phrase for the opening and the operator
	local OpeningPhrase = Opening[chatmodule.mathrandom(1, #Opening)]
	local OperatorPhrase = ""
	if Symbol == "+" then
		OperatorPhrase = AddConstruct[chatmodule.mathrandom(1, #AddConstruct)]
	elseif Symbol == "-" then
		OperatorPhrase = SubtractConstruct[chatmodule.mathrandom(1, #SubtractConstruct)]
	elseif Symbol == "*" then
		OperatorPhrase = MultiplyConstruct[chatmodule.mathrandom(1, #MultiplyConstruct)]
	elseif Symbol == "/" then
		OperatorPhrase = DivideConstruct[chatmodule.mathrandom(1, #DivideConstruct)]
	end


	-- Calculate the answer by applying the operator to the numbers
	local Answer = nil
	if Symbol == "+" then
		Answer = Num1 + Num2
	elseif Symbol == "-" then
		Answer = Num1 - Num2
	elseif Symbol == "*" then
		Answer = Num1 * Num2
	elseif Symbol == "/" then
		Answer = Num1 / Num2
	end

	return Opening[chatmodule.mathrandom(1,#Opening)]..Num1.." "..Subject..OperatorPhrase..Num2.."."..ClosingPhrase[chatmodule.mathrandom(1,#ClosingPhrase)],Answer
end

censor={"companies","corporation","baby","television","show","do","business",
	"pregnant","babies","burning","propaganda","hentai","political party","political","public office","presidential","politics","joe biden","biden","Donald Trump","trump","sit-com","sitcom","hells angels","gang members","mafia","lesbian","killer","killers","gay","sexual","concentration camps","internment camps","refugee","murder","marketing","pornstar","porn","sex","beer","lager","hey","EP","hi","song","hello","hell","album","nazi","racism","theft","sexual","criminal"
,"felony","misdemeneor","ROBLOX",
	"arson","law case","case law",
	"bombing","terrorism","racist","copyright","infringement","holocaust","genocide","hatred","offender","state-law","state law","city code"}

function chatmodule.ReduceQuery(str)
	if string.len(str)>3 then
	for _, word in ipairs(blacklistwords) do
		-- escape any special characters in the word
		local pattern = word:gsub("%p", "%%%1")
		-- add word boundaries to match whole words only
		pattern = "%f[%a]" .. pattern .. "%f[%A]"
		-- replace the word with an empty string
		str = str:gsub(pattern, "")
		end
		if string.len(str)>3 then
	for _, word in ipairs(lightlistwords) do
		-- escape any special characters in the word
		local pattern = word:gsub("%p", "%%%1")
		-- add word boundaries to match whole words only
		pattern = "%f[%a]" .. pattern .. "%f[%A]"
		-- replace the word with an empty string
		str = str:gsub(pattern, "")
			end
			--if string.len(str)>3 then
			--	for _, word in ipairs(censor) do
			--		-- escape any special characters in the word
			--		local pattern = word:gsub("%p", "%%%1")
			--		-- add word boundaries to match whole words only
			--		pattern = "%f[%a]" .. pattern .. "%f[%A]"
			--		-- replace the word with an empty string
			--		str = str:gsub(pattern, "")	
			--	end
			if string.len(str)>1 then	
	for _, word in ipairs(badwords) do
		-- escape any special characters in the word
		local pattern = word:gsub("%p", "%%%1")
		-- add word boundaries to match whole words only
		pattern = "%f[%a]" .. pattern .. "%f[%A]"
		-- replace the word with an empty string
		str = str:gsub(pattern, "")
				end
				if string.len(str)>1 then
	for _, wordta in ipairs(Reflection) do
		for _, word in ipairs(wordta) do
		-- escape any special characters in the word
		local pattern = word:gsub("%p", "%%%1")
		-- add word boundaries to match whole words only
		pattern = "%f[%a]" .. pattern .. "%f[%A]"
		-- replace the word with an empty string
		str = str:gsub(pattern, "")
						end
					end
				end
			end	
			end	
	--	end	
end	
return str
end

function chatmodule.findBestMatch2(strings, keyword)
	local bestMatch = nil -- the best match string
	local bestCount = 0 -- the highest count of keyword occurrences
	local score=0
	for i, str in ipairs(strings) do -- loop through the strings in the table
		str=strings[i]
		local check=false
		for _, blkl in ipairs(blacklist) do 
			if str==blkl then
				check=true
			end
		end
		if check==false then
			local count = chatmodule.countKeyword(str, keyword) -- get the count of keyword occurrences in the string
			if count > bestCount then -- if the count is higher than the best count so far
				bestMatch = str -- update the best match string
				bestCount = count-- update the best count number
			end
			for i=1,math.min(#keyword, #str) do
				if keyword:sub(i,i) == str:sub(i,i) then
					score = score + .1
				end 
			end
		end	
	end

	return bestMatch, bestCount+score-- return the best match and its count
end
function tablecontains(table, element)
	for _, value in ipairs(table) do
		if value == element then
			return true
		end
	end
	return false
end

function chatmodule.IsWhatSearchQuery(inputStr)

	for _, kw in ipairs(questionKeywords) do

		if string.find(inputStr, kw) then

			local idx1 = string.find(inputStr, kw) + string.len(kw) 
			local idx2 = string.find(inputStr, " ", idx1+1)

			if idx2 then

				local kw1 = string.sub(inputStr, idx1, idx1)
				local kw2 = string.sub(inputStr, idx1+1, idx2-1)

				if kw1 == " " and tablecontains(qKeywordPairs, kw2) then

					local kw3 = string.sub(inputStr, idx2+1, idx2+20) 

					-- Check if kw3 is a reflection word
					for _,pair in ipairs(Reflection) do
						if kw2 == pair[1] and kw3 == pair[2] then
							return false 
						end
					end

					-- Passed reflection check
					return true

				end

			end

			
		end

	end

	return false

end

function chatmodule.Extractnouns(str)
	local extractedNouns = {}
	for word in string.gmatch(str, "%a+") do 
		for _, noun in ipairs(nouns) do
			if word:lower() == noun then
				table.insert(extractedNouns, noun)
				break
			end
		end
	end
	local resultStr = ""
	for _, noun in ipairs(extractedNouns) do
		resultStr = resultStr .. " " .. noun
	end
	return resultStr

end

-- A function that takes in a query string and a database table and returns the best matching entries based on the entropy formula
-- A function that takes in a query string, a database table, and several parameters to filter and modify the results
function chatmodule.SearchQueryPattern(query, database, filter, repetitive, randomize, reverse, spaces)
	-- Initialize an empty table to store the results
	local results = {}
	local result=nil
	-- Split the query string into words
--if filter then	query = chatmodule.ReduceQuery(query) end
	local words = chatmodule.splitString(query,filter)
if #database>0 then
	-- Loop through each entry in the database table
	for i, entry in ipairs(database) do
		-- Initialize the count, weight, and entropy variables
		local count = 0
		local weight = #words
		local entropy = 0
		-- Create a table to store the frequency of each word in the entry
		local frequency = {}
		-- Split the entry into words
			----print((database[i]))
			
			local entry_words = chatmodule.splitString(database[i].match,filter)
		--	--print((database[i]))
		-- Loop through each word in the entry
		for _, word in ipairs(entry_words) do
			-- Increment the frequency of the word by 1
			frequency[word] = (frequency[word] or 0) + 1
			-- Check if the word matches the query exactly, ignoring case and punctuation
			if string.match(word, "^%f[%a]"..query.."%f[%A]$") then
				-- Increment the count by 1
				count = count + 1
			end
		end
		-- Loop through each value in the frequency table
		for _, value in pairs(frequency) do
			-- Calculate the probability of the word in the entry
			local p = value / #entry_words
			-- Calculate the entropy of the word in the entry using the formula: -p * log(p)
			entropy = entropy - p * math.log(p)
			end
			weight=weight
		-- Calculate the pattern score of the entry using the formula: (count/weight) * (entropy/max_entropy)
		local pattern_score = (count/weight) * (entropy/math.log(#entry_words))
		-- Insert the entry and its pattern score into the results table
		table.insert(results, {entry = entry, score = pattern_score})
	end
		
		
	-- Sort the results table by descending order of pattern score
	table.sort(results, function(a, b) return a.score > b.score end)
end
	-- If there are no results, return nil and an error message
	if #results == 0 then 
		return nil
	end		
	--if results.en
	 result=results[1].entry
	--print(result)
--if reverse == true then 
--			--result = chatmodule.reverseparagraph(result)
--	end	
--	-- If the repetitive parameter is false and there are results, insert them into the blacklist table using your table.insert function 
--	if repetitive == false and #results > 0 then 
--			--table.insert(blacklist,result)

--	end

	-- Return the results table
	return  result,blacklist,weight

end


-- A function that takes in a query string, a database table, and several parameters to filter and modify the results

function chatmodule.SearchQuery(query,database,filter,repetitive,randomize,reverse,spaces,mode,complete)
	local matches = {} -- A table to store the matches and their scores
	local BlacklistedKeyword
	local result = nil 
	local score=0
	local weight=1	
	if  spaces==true then
	return chatmodule.find_closest_match(database, query)
	else
		local bestMatch,bestCount
				bestMatch,bestCount,weight = chatmodule.findBestMatch(database,query,filter,mode,complete)
				-- Find the best match and its count for each word using your findBestMatch function
				if bestMatch then -- If there is a match
					if matches[bestMatch] then -- If the match is already in the table
						matches[bestMatch] = matches[bestMatch] + bestCount -- Add the count to its score
					else -- If the match is not in the table yet
						matches[bestMatch] = bestCount -- Set its score to the count
					end
				end	
	local sortedMatches = {} -- A table to store the sorted matches by their scores
	for match, score in pairs(matches) do -- Loop through the matches and their scores
		table.insert(sortedMatches, {match = match, score = score}) -- Insert each match and its score as a subtable into the sortedMatches table
	end
	table.sort(sortedMatches, function(a, b) return a.score > b.score end) -- Sort the sortedMatches table by the score field in descending order
	if #sortedMatches > 0 then -- If there is at least one match
		--result = "The best match(es) for '" .. query .. "' are:\n" -- Start the result string with an introduction
		if randomize==true and  #sortedMatches>0 then
			local num=chatmodule.mathrandom(1,math.min(#sortedMatches, 3))
			result=sortedMatches[num].match
			score=sortedMatches[num].score
		elseif #sortedMatches>0 then
			if filter==true or filter==false or filter==nil then				
				result=sortedMatches[1].match
				score=sortedMatches[1].score
			elseif filter==1  then
				local results,blacklist,weight=	chatmodule.SearchQueryPattern(query, sortedMatches, filter, repetitive, randomize, reverse, spaces)
				result=results.match
				score=results.score
				end	
		end	
		context=context+1
			if blacklist==nil then
				blacklist={}
			end
			if repetitive==false and result and blacklist then
				table.insert(blacklist,result)
			end		
			
		--result=sortedMatches[chatmodule.mathrandom(1,math.min(#sortedMatches, 3))]
	else -- If there are no matches
		result=nil
	end
	end	
--	print(blacklist)
	return result,blacklist,score,weight
	-- Return the result string
end

function chatmodule.SearchContext(str,database,filter,repetitive,randomize,blacklist)
	--if player is talking about something we already talked about use the result to find new topic.
	local Result=nil
	if #blacklist>0 then
	local Iscontext=chatmodule.CompleteQuery(str,blacklist,true,true,randomize,true)	
	if Iscontext~=nil then
		Result=chatmodule.CompleteQuery(blacklist[#blacklist],database,true,true,randomize,true)
		end
	end	
	return Result,blacklist
end

function chatmodule.BuildResponse(str,database,filter,repetitive,randomize,blacklist)
	--if player is talking about something we already talked about use the result to find new topic.
	local Result=nil
	if #blacklist>0 then
		--local Iscontext=chatmodule.CompleteQuery(str,blacklist,true,true,randomize,true)	
		--if Iscontext~=nil then
			Result=chatmodule.CompleteQuery(blacklist[#blacklist],database,true,true,randomize,true)
		--end
	end	
	return Result,blacklist
end


function chatmodule.SplitQueryWithKeyChar(query, num1)

	local parts = {}

	-- Find index of first number in query
	local num1Index = string.find(query, tostring(num1))

	-- Get substring before number 
	parts[1] = string.sub(query, 1, num1Index - 1)

	-- Get substring after number
	parts[2] = string.sub(query, num1Index + 1)

	return parts[1], parts[2]

end

function chatmodule.DoesQueryWantMath(query)
	local Num1=nil
	local Num2=nil
	for word in string.gmatch(query, "%S+") do
	if tonumber(word) then 
		if not Num1 then
			Num1 = tonumber(word) 
	
		else
			Num2 = tonumber(word)
			break -- stop after 2 numbers found
		end
	end
end
	return Num1,Num2
	--,identifier
end

function chatmodule.lowerFirst(str)
	-- Check if the input is a valid string
	if type(str) == "string" and str ~= "" then
		-- Find the first letter in the string using string.match
		local first = str:match("[A-Za-z]")
		-- Convert it to lower case using string.lower
		local lowerFirst = string.lower(first)
		-- Replace the first occurrence of the letter in the string with the lower case version using string.gsub
		local result = str:gsub(first, lowerFirst, 1)
		-- Return the result
		return result
	else
		-- Return nil if the input is not a valid string
		return nil
	end
end

function chatmodule.randomizeStringLight(str,interphrases,randomize) 
	--local interchangedphrases=phrases
	-- Split the string into sentences
	local sentences = {}
	local str=tostring(str)
	local words=chatmodule.splitString(str)
	if #words>1 then
		for s in str:gmatch("[^%.]+") do
			table.insert(sentences, s)
		end
		-- Loop through the sentences and replace any matching phrases with a random one from the table
		local newSentences = {}
		for i, s in ipairs(sentences) do
			local newS = s
			for j, phrases in ipairs(interphrases) do
				for k, phrase in ipairs(phrases) do
					if s:find(phrase) then
						-- Pick a random phrase from the same group
						local randomPhrase
						if randomize==nil then
							 randomPhrase = phrases[chatmodule.mathrandom(#phrases)]
						else 
							randomPhrase= phrases[randomize]
						end	
						-- Replace the original phrase with the random one
						newS = newS:gsub(phrase, randomPhrase)
						for i, s in ipairs(chatmodule.splitString(newS)) do
							local newS = s
							for j, phrases in ipairs(interphrases) do
								for k, phrase in ipairs(phrases) do
									if s:find(phrase) then
										-- Pick a random phrase from the same group
										local randomPhrase
										if randomize==nil then
											randomPhrase = phrases[chatmodule.mathrandom(#phrases)]
										else 
											randomPhrase= phrases[randomize]
										end	
										-- Replace the original phrase with the random one
										newS = newS:gsub(phrase, randomPhrase)
										--	break
									end
								end
							end
							--table.insert(newSentences, newS)
						end
						--break
					end
				end
			end

			table.insert(newSentences, newS)
		end
		-- Join the new sentences with periods and return the result
		return table.concat(newSentences, " ")
	end
end

function chatmodule.randomizeString(str) 
	-- Split the string into sentences
	local sentences = {}
	--local str=tostring(str)
	--local words=chatmodule.splitString(str)
	--if #words>1 then
	if str:gmatch("[^%.]+") then
	for s in str:gmatch("[^%.]+") do
			table.insert(sentences, s)
		end
	else 
		sentences={str}
	end	
		-- Loop through the sentences and replace any matching phrases with a random one from the table
		local newSentences = {}
		for i, s in ipairs(sentences) do
			local newS = s
			for j, phrases in ipairs(interchangephrases) do
				for k, phrase in ipairs(phrases) do
					if s:find(phrase) then
						-- Pick a random phrase from the same group
						local randomPhrase = phrases[chatmodule.mathrandom(#phrases)]
						-- Replace the original phrase with the random one
						newS = newS:gsub(phrase, randomPhrase)
						for i, s in ipairs(chatmodule.splitString(newS)) do
							local newS = s
							for j, phrases in ipairs(interchangephrases) do
								for k, phrase in ipairs(phrases) do
									if s:find(phrase) then
										-- Pick a random phrase from the same group
										local randomPhrase = phrases[chatmodule.mathrandom(#phrases)]
										-- Replace the original phrase with the random one
										newS = newS:gsub(phrase, randomPhrase)
										--	break
									end
								end
							end
							--table.insert(newSentences, newS)
						end
						--break
					end
				end
			end

			table.insert(newSentences, newS)
		end

		-- Join the new sentences with periods and return the result
		return table.concat(newSentences, ". ")
	--end
end
function chatmodule.Getsynonyms(s,complete)
	if string.len(s)>=3 and complete==true then
	for j, phrases in ipairs(synonympairs) do
			for k, phrase in ipairs(phrases) do
					if s:find(phrase)  then 
						return phrases
					end				
			end
		end	
	end	
	return {s}
end
function chatmodule.CompleteQuery(str,database,filter,repetitive,randomize,context,reverse,spaces,mode)
	local filter=filter
	local score=0
	--if spaces==true then		
	--	--str = string.gsub(str, "%s+", "")
	--end
	-- Split the string into sentences
	local sentences = {}
	local Result=nil
	if filter==true then	
		str=chatmodule.ReduceQuery(str)	
		filter="filtered"

	end	
	-- Loop through the sentences and replace any matching phrases with a random one from the table
	local newSentences = {}
	Result,blacklist,score,weight=chatmodule.SearchQuery(str,database,filter,repetitive,randomize,reverse,spaces,mode,true)
	--print(str)
	--if Result==nil and #blacklist>0  and context==true then
	--	Result=chatmodule.SearchContext(str,database,filter,repetitive,randomize,blacklist)	
	--end
	if reverse==true and Result~=nil then
		Result=chatmodule.reverseparagraph(Result)
	end
	return Result,blacklist,score,weight
end


local DataBasedir=script:GetChildren()

local function split(str, delim)
	-- Initialize an empty table to store the substrings
	local result = {}
	-- Loop through the string and find the positions of the delimiter
	local start = 1
	local finish = str:find(delim, start)
	while finish do
		-- Extract the substring between the start and finish positions and add it to the table
		local substr = str:sub(start, finish - 1)
		table.insert(result, substr)
		-- Update the start position to be after the delimiter
		start = finish + #delim
		-- Find the next position of the delimiter
		finish = str:find(delim, start)
	end
	-- Add the remaining substring to the table
	local substr = str:sub(start)
	table.insert(result, substr)
	-- Return the table of substrings
	return result
end

shakespeare={"shakespeare"}

local function convertTable(oldTable)
	-- Use table.concat () to concatenate all the values in the old table, separated by a comma and a space
	local result = table.concat(oldTable, ", ")
	-- Use string.split () to split the result by the same separator and create a new table
	local newTable = string.split(result, ", ")
	-- Return the new table
	return newTable
end

function chatmodule.split_paragraphs(text,length)
local paragraphs = {}

local paragraph = ""

local max_len = length

-- Define the punctuation marks that can end a paragraph
local punctuation = {".", "?", "!"}

-- Initialize an empty table to store the paragraphs
local paragraphs = {}

-- Initialize an empty string to store the current paragraph
local paragraph = ""

-- Loop through each character in the text
for i = 1, #text do
	-- Get the current character
	local char = text:sub(i, i)

	-- Append the character to the current paragraph
	paragraph = paragraph .. char

	-- Check if the character is a punctuation mark
	local is_punctuation = false
	for _, p in ipairs(punctuation) do
		if char == p then
			is_punctuation = true
			break
		end
	end

	-- Check if the current paragraph has reached the maximum length or the end of the text
	local is_end = i == #text

	-- If either condition is met, add the current paragraph to the table and reset it
		if (is_punctuation and #paragraph >= max_len and string.len(paragraph)>5) or (is_end and string.len(paragraph)>5) then
		table.insert(paragraphs, paragraph)
		paragraph = ""
		end

	end
	return paragraphs
end

function chatmodule.SearchQueries(Datadirectory,query,filter)
	local dir={}
	if typeof(Datadirectory)~="table" then
		Datadirectory=Datadirectory:GetChildren()
	end
	for i,c in ipairs(Datadirectory) do
		table.insert(dir,c.Name)--Do query with past player responses
	end		
	return chatmodule.CompleteQuery(query, dir, filter, false, true, true, false)--return the matching query
end

function chatmodule.SearchDirectory(DataBasedirectory,query,filter)
	local Result=nil
	local datab
	local context=nil
	local context,blacklist,score,weight = chatmodule.SearchQueries(DataBasedirectory,query,filter)--context is the prompt used
		if context~=nil then--if context is nil result is nil 
		local Subject = DataBasedirectory:FindFirstChild(context)
		--print(Subject)
		if Subject ~= nil then
			Subject=Subject.Value
			-- Check length and split paragraphs if needed
			if string.len(Subject) > 360 then--make sure response is not too long.
				local datab = chatmodule.split_paragraphs(Subject,360)
				--print("Parsing Paragraphs")
			else
				datab = {Subject} -- Put in table
			end
			-- Search paragraphs for match
			if #datab > 0 then
				if #datab==1 then
					Result=datab[1]
				else
					Result,blacklist,score,weight = chatmodule.CompleteQuery(query, datab, filter, false, true, true, false)
					if Result == nil then
						print("Result likely not to do with query?")
						-- No match, get random paragraph
						Result= datab[chatmodule.mathrandom(1,#datab)] 
					end
				end	
			end
			end
		end	
	return Result,blacklist,score,weight
end

function split_sentences(str)
	local sentences = {}
	local pattern = "([^%.%!%?]+[%.%!%?])"
	for sentence in str:gmatch(pattern) do
		table.insert(sentences, sentence)
	end
	return sentences
end

-- A function that reverses the order of a table
function reverse_table(t)
	local reversed = {}
	for i = #t, 1, -1 do
		table.insert(reversed, t[i])
	end
	return reversed
end

-- A function that reverses the sentences of a paragraph
function chatmodule.reverseparagraph(paragraph)
	local sentences = split_sentences(paragraph) -- Split the paragraph into sentences
	local reversed = reverse_table(sentences) -- Reverse the order of the sentences
	local result = table.concat(reversed, " ") -- Concatenate the reversed sentences into a string
	return result
end

function chatmodule.APICall(str,context,Library)
	local Result=nil
	local Library=Library
	if Library:FindFirstChild(""..str.."")==nil then
		remote:FireServer(str,context)	
		local curtick=resourcedirectory.Tick.Value
		local modulequec=moduleque
		--print("waiting for response")
		repeat wait() until Library:FindFirstChild(""..str.."")~=nil or curtick+20<resourcedirectory.Tick.Value or (modulequec<moduleque and curtick+6<resourcedirectory.Tick.Value)
		--print("Times up")
	end	

	if Library:FindFirstChild(""..str.."")==nil then
		--print("Timed out no Result")
		Result=nil	
	else
		print("Found API Result")
		local Subject=Library:FindFirstChild(""..str.."").Value
		Result=Subject
	end	
	return Result
end
function chatmodule.ClassifyAPI(str,context,responses,person,player,NPCstr,call)
	local Result=nil
	remote:FireServer(str,call,context,responses,person,NPCstr)	--player,str,apicall,context,responses,person,NPCstr)
	Result=	Waitforresponse(player.PlayerGui.Chatbot.ServerString,str,context,responses,person)
	return Result
end

function Waitforresponse(serverstring,str,context,responses,person)
	local Result=nil
	local prev=serverstring.Value		
	local curtick=resourcedirectory.Tick.Value
		--print("waiting for response")
		repeat task.wait() until serverstring.Value~=prev or curtick+20<resourcedirectory.Tick.Value
	--print("Times up")
	if serverstring.Value~="" then
		print("Got result")
		Result=serverstring.Value
	else Result=nil	
	end	
	return Result
end
function chatmodule.UpdateEmotions(person,emotion,score)
remote:FireServer(nil,person,nil,nil,nil,nil,emotion,score)
end
badsearchwords={"nam","name","your","hey","greetings","hi","hello","feelings","feeling","what","sitcom","hells","hells angels","gang members","mafia","lesbian","killer","killers","gay","sexual","concentration camps","internment camps","refugee","murder","marketing","pornstar","porn","sex",	"beer","lager","hey","EP","hi","song","hello","hell","album","nazi","racism","theft","sexual","criminal"
	,"crime","felony","misdemeneor","hatred","ROBLOX",
	"arson","bombing","terrorism","racist","copyright","infringement","my little pony","holocaust","genocide","hatred","offender","state-law","state law","city code","programming","whats","what","the","favorite"}
function chatmodule.APIResponse(str,apireq,context,responses,person,player,NPCstr)--serverstructure str,apicall,context,responses,person,NPCstr
	local Result=nil
	local NPCstr=NPCstr
	local str=str
	local score,weight=1,1
	if apireq=="search" then
		
		for _, word in ipairs(blacklistwords) do 
			-- escape any special characters in the word
			local pattern = word:gsub("%p", "%%%1")
			-- add word boundaries to match whole words only
			pattern = "%f[%a]" .. pattern .. "%f[%A]"
			-- replace the word with an empty string
			str = str:gsub(pattern, "")
		end
		for _, word in ipairs(badsearchwords) do
			-- escape any special characters in the word
			local pattern = string.lower(word:gsub("%p", "%%%1"))
			-- add word boundaries to match whole words only
			pattern = "%f[%a]" .. pattern .. "%f[%A]"
			-- replace the word with an empty string
			str = str:gsub(pattern, "")
		end
		
		if str~="" and str~=nil and string.len(str)>3 then
			--print("string passed")
			local Subject=chatmodule.APICall(str,apireq,LearningLibrary)
				--local Subject=LearningLibrary:FindFirstChild(""..str.."").Value
			if Subject~=nil then
			if string.len (Subject)>500 then
					local datab=chatmodule.split_paragraphs(Subject,250)
					--print("Parsing Paragraphs")
					--print(datab)
			--chatmodule.CompleteQuery(str,database,filter,repetitive,randomize,context,reverse,spaces)
			if #datab>0 then
						if #datab>1 then
							local struc={}
							for i,dat in ipairs(datab) do
								struc[dat]=datab[i]
							end
							--print(struc)
							--print("Doing query")
							Result,blacklist,score,weight=chatmodule.CompleteQuery(str,struc,true,false,false,false)
						if Result==nil then
								--	--print("Result Nil Going to index 1")
								--print("Result appears to not match query")
								return nil,blacklist,score,weight
								--table.insert(blacklist,datab[1])
									--datab[1]
							else 
								
								return Result,blacklist,score,weight
								----print("query does not seem to match search result.")
								--Result=datab[1]	
							end	
						else
							--print("Only 1 Paragraph")		
				Result=datab[1]
				end				
					else return nil	
					end	
			else 	
				--print("String does not exceed character limit return result")	
				Result=Subject
				end	
			end	
		else return nil	
		end
	elseif apireq=="question" then	
		if str~="" and str~=" " then
			Result=chatmodule.APICall(str,apireq,InsructLibrary)		
			if Result then
				table.insert(blacklist,Result)
			end	
		end
	
	elseif apireq=="philosophy" then
		if str~="" and str~=nil then
			--print("string passed")
			local Subjects=PhilosophyLibrary:GetChildren()
			if #Subjects>0 then
			for i,Subjectobj in ipairs(Subjects) do
				local Subject=Subjectobj.Value
				if Subject~=nil then
				if string.len (Subject)>500 then
					local datab=chatmodule.split_paragraphs(Subject,250)
					--print("Parsing Paragraphs")
					--print(datab)
					--chatmodule.CompleteQuery(str,database,filter,repetitive,randomize,context,reverse,spaces)
					if #datab>0 then
						if #datab>1 then
							--print("Doing query")
									Result,blacklist,score,weight=chatmodule.CompleteQuery(str,datab,true,false,true,true,false)
							if Result==nil then
								--print("Result Nil Going to index 1")
								--Result=datab[1]
							end	
						else
							--print("Only 1 Paragraph")		
									Result,blacklist,score,weight=chatmodule.CompleteQuery(str,{datab[1]},true,false,true,true,false)
						end				
					end	
				else 	
					--print("String does not exceed character limit return result")	
					Result=Subject
				end	
					end	
				end	
			end
		end	
	--elseif PhilosophyLibrary:FindFirstChild(context)~=nil then
	--	local Subject=PhilosophyLibrary:FindFirstChild(context).Value
	--	if Subject~=nil then
	--		if string.len (Subject)>500 then
	--			local datab=chatmodule.split_paragraphs(Subject)
	--			--print("Parsing Paragraphs")
	--			--print(datab)
	--			--chatmodule.CompleteQuery(str,database,filter,repetitive,randomize,context,reverse,spaces)
	--			if #datab>0 then
	--				if #datab>1 then
	--					--print("Doing query")
	--					Result=chatmodule.CompleteQuery(str,datab,true,false,true,true,false)
	--					if Result==nil then
	--						--print("Result Nil Going to index 1")
	--						Result=datab[chatmodule.mathrandom(1,#datab)]
	--					end	
	--				else
	--					--print("Only 1 Paragraph")		
	--					Result=datab[1]
	--				end				
	--			end	
	--		else 	
	--			--print("String does not exceed character limit return result")	
	--			Result=Subject
	--		end	
	--	end		
	elseif apireq=="classify" then
		Result,blacklist,score,weight=chatmodule.SearchDirectory(DataBasedir,str,true)
		if Result==nil then
			local library=script.Parent.APICallsLearnData.Chat:FindFirstChild(person) 
			if library~=nil then
				Result=chatmodule.SearchDirectory(library,str,false)
			end
			if Result==nil then
				Result=chatmodule.ClassifyAPI(str,context,responses,person,player,NPCstr,apireq)--player,str,apicall,context,responses,person,NPCstr)
			end
		end	
	elseif apireq=="greetings" then
		Result,blacklist,score,weight=chatmodule.SearchDirectory(DataBasedir,str,true)
		if Result==nil then
			local library=script.Parent.APICallsLearnData.Chat:FindFirstChild(person) 
			if library~=nil then
				Result,blacklist,score,weight=chatmodule.SearchDirectory(library,str,false)
			end
			if Result==nil then
				Result=chatmodule.ClassifyAPI(str,context,responses,person,player,NPCstr,apireq)--player,str,apicall,context,responses,person,NPCstr)
			end
		end		
	end
	if Result then
		table.insert(blacklist,Result)
	end
	return Result,blacklist,score,weight
end
return chatmodule
